
Tuner_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013570  08007360  08007360  00017360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8d0  0801a8d0  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8d0  0801a8d0  0002a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8d8  0801a8d8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8d8  0801a8d8  0002a8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8dc  0801a8dc  0002a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801a8e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007350  20000074  0801a954  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200073c4  0801a954  000373c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f615  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238c  00000000  00000000  0003f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00041a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00042640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001773b  00000000  00000000  00043120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc36  00000000  00000000  0005a85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000959ef  00000000  00000000  0006a491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000ffe80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003970  00000000  00000000  000fff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  001038b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007344 	.word	0x08007344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007344 	.word	0x08007344

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // Dia chi dau

void lcd_send_cmd (char cmd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l; //char 1 byte de luu tren 4 cao and 4 thap
	uint8_t data_t[4];
	data_u = (cmd&0xf0); // cmd and 0xf0 = 11110000 de tao 4 bit cao
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0); // delete 4 bit cao
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 030c 	orr.w	r3, r3, #12
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f043 030c 	orr.w	r3, r3, #12
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100); // send qua i2c
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2304      	movs	r3, #4
 8001016:	214e      	movs	r1, #78	; 0x4e
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <lcd_send_cmd+0x5c>)
 800101a:	f002 fb7f 	bl	800371c <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000138 	.word	0x20000138

0800102c <lcd_send_data>:

void lcd_send_data (char data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 030d 	orr.w	r3, r3, #13
 800104a:	b2db      	uxtb	r3, r3
 800104c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f043 0309 	orr.w	r3, r3, #9
 8001054:	b2db      	uxtb	r3, r3
 8001056:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f043 030d 	orr.w	r3, r3, #13
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	f043 0309 	orr.w	r3, r3, #9
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2304      	movs	r3, #4
 8001076:	214e      	movs	r1, #78	; 0x4e
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <lcd_send_data+0x5c>)
 800107a:	f002 fb4f 	bl	800371c <HAL_I2C_Master_Transmit>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000138 	.word	0x20000138

0800108c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)  // row hang col cot dat vi tri con tro
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
    switch (row)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d81f      	bhi.n	80010dc <lcd_put_cur+0x50>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <lcd_put_cur+0x18>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010bf 	.word	0x080010bf
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010d3 	.word	0x080010d3
    {
        case 0:
            col |= 0x80;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ba:	603b      	str	r3, [r7, #0]
            break;
 80010bc:	e00e      	b.n	80010dc <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010c4:	603b      	str	r3, [r7, #0]
            break;
 80010c6:	e009      	b.n	80010dc <lcd_put_cur+0x50>
				case 2:
						col |= 0x94;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80010ce:	603b      	str	r3, [r7, #0]
						break;
 80010d0:	e004      	b.n	80010dc <lcd_put_cur+0x50>
				case 3:
						col |= 0xD4;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80010d8:	603b      	str	r3, [r7, #0]
						break;
 80010da:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff73 	bl	8000fcc <lcd_send_cmd>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop

080010f0 <lcd_init>:


void lcd_init (void) // init lcd
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010f4:	2032      	movs	r0, #50	; 0x32
 80010f6:	f000 ff9b 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fa:	2030      	movs	r0, #48	; 0x30
 80010fc:	f7ff ff66 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001100:	2005      	movs	r0, #5
 8001102:	f000 ff95 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001106:	2030      	movs	r0, #48	; 0x30
 8001108:	f7ff ff60 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800110c:	2001      	movs	r0, #1
 800110e:	f000 ff8f 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001112:	2030      	movs	r0, #48	; 0x30
 8001114:	f7ff ff5a 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f000 ff89 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800111e:	2020      	movs	r0, #32
 8001120:	f7ff ff54 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f000 ff83 	bl	8002030 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800112a:	2028      	movs	r0, #40	; 0x28
 800112c:	f7ff ff4e 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 ff7d 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001136:	2008      	movs	r0, #8
 8001138:	f7ff ff48 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 ff77 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff ff42 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 ff71 	bl	8002030 <HAL_Delay>
	HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 ff6e 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff ff39 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 ff68 	bl	8002030 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001160:	200c      	movs	r0, #12
 8001162:	f7ff ff33 	bl	8000fcc <lcd_send_cmd>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}

0800116a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001172:	e006      	b.n	8001182 <lcd_send_string+0x18>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff55 	bl	800102c <lcd_send_data>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f4      	bne.n	8001174 <lcd_send_string+0xa>
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <send_float_to_lcd>:
  for (int j = i - 1; j >= 0; j--) {
    lcd_send_data(buffer[j]);
  }
}

void send_float_to_lcd(float value) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	ed87 0a01 	vstr	s0, [r7, #4]
  char buffer[20];

  // float to string
  int integerPart = (int)value;
 800119e:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a6:	ee17 3a90 	vmov	r3, s15
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  int decimalPart = (int)((value - integerPart) * 100); // lay 2 so thap phan
 80011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012e8 <send_float_to_lcd+0x154>
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ca:	ee17 3a90 	vmov	r3, s15
 80011ce:	623b      	str	r3, [r7, #32]

  // nguyen to string
  int i = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  do {
    buffer[i++] = '0' + (integerPart % 10);
 80011d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <send_float_to_lcd+0x158>)
 80011d8:	fb83 1302 	smull	r1, r3, r3, r2
 80011dc:	1099      	asrs	r1, r3, #2
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	1c59      	adds	r1, r3, #1
 80011f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80011f4:	3230      	adds	r2, #48	; 0x30
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	3330      	adds	r3, #48	; 0x30
 80011fa:	443b      	add	r3, r7
 80011fc:	f803 2c28 	strb.w	r2, [r3, #-40]
    integerPart /= 10;
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <send_float_to_lcd+0x158>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	1092      	asrs	r2, r2, #2
 800120a:	17db      	asrs	r3, r3, #31
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  } while (integerPart > 0);
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	2b00      	cmp	r3, #0
 8001214:	dcde      	bgt.n	80011d4 <send_float_to_lcd+0x40>

  // inveter ky tu
  int j;
  for (j = 0; j < i / 2; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	e01f      	b.n	800125c <send_float_to_lcd+0xc8>
    char temp = buffer[j];
 800121c:	f107 0208 	add.w	r2, r7, #8
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	77fb      	strb	r3, [r7, #31]
    buffer[j] = buffer[i - j - 1];
 8001228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	3330      	adds	r3, #48	; 0x30
 8001232:	443b      	add	r3, r7
 8001234:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	4413      	add	r3, r2
 8001240:	460a      	mov	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
    buffer[i - j - 1] = temp;
 8001244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	3330      	adds	r3, #48	; 0x30
 800124e:	443b      	add	r3, r7
 8001250:	7ffa      	ldrb	r2, [r7, #31]
 8001252:	f803 2c28 	strb.w	r2, [r3, #-40]
  for (j = 0; j < i / 2; j++) {
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	3301      	adds	r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	0fda      	lsrs	r2, r3, #31
 8001260:	4413      	add	r3, r2
 8001262:	105b      	asrs	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	4293      	cmp	r3, r2
 800126a:	dbd7      	blt.n	800121c <send_float_to_lcd+0x88>
  }

  // add dau cho float
  buffer[i++] = '.';
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	62ba      	str	r2, [r7, #40]	; 0x28
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	443b      	add	r3, r7
 8001276:	222e      	movs	r2, #46	; 0x2e
 8001278:	f803 2c28 	strb.w	r2, [r3, #-40]
  buffer[i++] = '0' + (decimalPart / 10);
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <send_float_to_lcd+0x158>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	1092      	asrs	r2, r2, #2
 8001286:	17db      	asrs	r3, r3, #31
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	1c59      	adds	r1, r3, #1
 8001290:	62b9      	str	r1, [r7, #40]	; 0x28
 8001292:	3230      	adds	r2, #48	; 0x30
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	3330      	adds	r3, #48	; 0x30
 8001298:	443b      	add	r3, r7
 800129a:	f803 2c28 	strb.w	r2, [r3, #-40]
  buffer[i++] = '0' + (decimalPart % 10);
 800129e:	6a3a      	ldr	r2, [r7, #32]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <send_float_to_lcd+0x158>)
 80012a2:	fb83 1302 	smull	r1, r3, r3, r2
 80012a6:	1099      	asrs	r1, r3, #2
 80012a8:	17d3      	asrs	r3, r2, #31
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	1ad1      	subs	r1, r2, r3
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80012be:	3230      	adds	r2, #48	; 0x30
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	3330      	adds	r3, #48	; 0x30
 80012c4:	443b      	add	r3, r7
 80012c6:	f803 2c28 	strb.w	r2, [r3, #-40]
  buffer[i] = '\0'; // and chuoi
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	4413      	add	r3, r2
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]

  lcd_send_string(buffer);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff45 	bl	800116a <lcd_send_string>
}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	42c80000 	.word	0x42c80000
 80012ec:	66666667 	.word	0x66666667

080012f0 <calculateSamplingRate>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculateSamplingRate()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
    // Calculate via ADC sample rate formula:
    uint32_t adcClockFrequency = HAL_RCC_GetPCLK2Freq();
 80012f6:	f003 f99d 	bl	8004634 <HAL_RCC_GetPCLK2Freq>
 80012fa:	61f8      	str	r0, [r7, #28]
    uint32_t adcPrescaler = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	61bb      	str	r3, [r7, #24]
    uint32_t adcResolution = hadc1.Init.Resolution;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <calculateSamplingRate+0x74>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	617b      	str	r3, [r7, #20]
    uint32_t adcNumChannels = hadc1.Init.NbrOfConversion;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <calculateSamplingRate+0x74>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	613b      	str	r3, [r7, #16]
    uint32_t adcSamplingTime = 480;
 800130c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001310:	60fb      	str	r3, [r7, #12]
    uint32_t adcConversionTime = 12;
 8001312:	230c      	movs	r3, #12
 8001314:	60bb      	str	r3, [r7, #8]
    // Calculate the sampling rate
    float samplingRate = ((float)adcClockFrequency/(float)adcPrescaler) / (float)((adcResolution + 1) * (adcNumChannels * (adcSamplingTime + adcConversionTime)));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	440a      	add	r2, r1
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	fb01 f202 	mul.w	r2, r1, r2
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a01 	vstr	s15, [r7, #4]
    return samplingRate;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000090 	.word	0x20000090

08001368 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	//point to first half of the adc buffer
	inBufPtr = &adcData[0];
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_ADC_ConvCpltCallback+0x20>)
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_ADC_ConvCpltCallback+0x24>)
 8001374:	601a      	str	r2, [r3, #0]
	processFlag = 1;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_ADC_ConvCpltCallback+0x28>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000
 800138c:	200001d4 	.word	0x200001d4
 8001390:	200021d4 	.word	0x200021d4

08001394 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	//point to second half of the adc buffer
	inBufPtr = &adcData[ADC_BUFFER_SIZE/2];
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800139e:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80013a0:	601a      	str	r2, [r3, #0]
	processFlag = 1;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000000 	.word	0x20000000
 80013b8:	200011d4 	.word	0x200011d4
 80013bc:	200021d4 	.word	0x200021d4

080013c0 <Processing>:
void Processing()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	//load one half of adc buffer to fft input buffer for processing
	for (uint16_t i = 0; i < (ADC_BUFFER_SIZE/2);i ++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	e012      	b.n	80013f2 <Processing+0x32>
	{
		fftBufIn[i] = ((float) inBufPtr[i]);
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <Processing+0x5c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	ee07 2a90 	vmov	s15, r2
 80013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <Processing+0x60>)
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < (ADC_BUFFER_SIZE/2);i ++)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	3301      	adds	r3, #1
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013f8:	d3e8      	bcc.n	80013cc <Processing+0xc>
	}
	//compute fft
	arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80013fa:	2300      	movs	r3, #0
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <Processing+0x64>)
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <Processing+0x60>)
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <Processing+0x68>)
 8001402:	f003 fc71 	bl	8004ce8 <arm_rfft_fast_f32>
	fftDoneFlag = 1;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <Processing+0x6c>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
	processFlag = 0;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <Processing+0x70>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	200033ac 	.word	0x200033ac
 8001424:	200053ac 	.word	0x200053ac
 8001428:	20003394 	.word	0x20003394
 800142c:	200021d5 	.word	0x200021d5
 8001430:	200021d4 	.word	0x200021d4

08001434 <freqCalculate>:
void freqCalculate()
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
	//Identify the max amplitude value
    for (uint32_t i = 0; i < FFT_BUFFER_SIZE; i += 2)
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e02f      	b.n	80014a0 <freqCalculate+0x6c>
    {
        magnitude[i / 2] = sqrtf(fftBufOut[i] * fftBufOut[i] + fftBufOut[i + 1] * fftBufOut[i + 1]);
 8001440:	4a38      	ldr	r2, [pc, #224]	; (8001524 <freqCalculate+0xf0>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <freqCalculate+0xf0>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	4a30      	ldr	r2, [pc, #192]	; (8001524 <freqCalculate+0xf0>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	edd3 6a00 	vldr	s13, [r3]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <freqCalculate+0xf0>)
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	085c      	lsrs	r4, r3, #1
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f005 f88e 	bl	80065a8 <sqrtf>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <freqCalculate+0xf4>)
 8001492:	00a3      	lsls	r3, r4, #2
 8001494:	4413      	add	r3, r2
 8001496:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < FFT_BUFFER_SIZE; i += 2)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3302      	adds	r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014a6:	d3cb      	bcc.n	8001440 <freqCalculate+0xc>
    }
    // Set DC component to zero
    magnitude[0] = 0.0;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <freqCalculate+0xf4>)
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

    uint32_t maxIndex = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
    float32_t maxValue = 0.0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]

    // Identify the max magnitude to calculate frequency
    for (uint32_t i = 0; i < FFT_BUFFER_SIZE / 2; ++i)
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	e017      	b.n	80014f0 <freqCalculate+0xbc>
    {
        if (magnitude[i] > maxValue)
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <freqCalculate+0xf4>)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d507      	bpl.n	80014ea <freqCalculate+0xb6>
        {
            maxValue = magnitude[i];
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <freqCalculate+0xf4>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	607b      	str	r3, [r7, #4]
            maxIndex = i;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < FFT_BUFFER_SIZE / 2; ++i)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f6:	d3e3      	bcc.n	80014c0 <freqCalculate+0x8c>
        }
    }

    // Calculate the corresponding frequency based on the max amplitude value
    freqVal = ((float32_t)maxIndex * samplingRate) / FFT_BUFFER_SIZE;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <freqCalculate+0xf8>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001530 <freqCalculate+0xfc>
 8001510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <freqCalculate+0x100>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	200053ac 	.word	0x200053ac
 8001528:	200021d8 	.word	0x200021d8
 800152c:	200001d0 	.word	0x200001d0
 8001530:	45000000 	.word	0x45000000
 8001534:	20003388 	.word	0x20003388

08001538 <calculateNoteFrequency>:

// Function to find the closest note and calculate the error
float calculateNoteFrequency(int noteIndex, int octave)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    const float referenceFrequency = 440.0f; // Reference frequency for A4
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <calculateNoteFrequency+0x88>)
 8001544:	60fb      	str	r3, [r7, #12]
    return referenceFrequency * pow(2.0f, ((noteIndex - 9) / 12.0f + (octave - 4)));
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff f866 	bl	8000618 <__aeabi_f2d>
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b09      	subs	r3, #9
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001560:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3b04      	subs	r3, #4
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	ee17 0a90 	vmov	r0, s15
 8001578:	f7ff f84e 	bl	8000618 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	ec43 2b11 	vmov	d1, r2, r3
 8001584:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80015b8 <calculateNoteFrequency+0x80>
 8001588:	f004 ff9e 	bl	80064c8 <pow>
 800158c:	ec53 2b10 	vmov	r2, r3, d0
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f898 	bl	80006c8 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fb42 	bl	8000c28 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	ee07 3a90 	vmov	s15, r3
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdb0      	pop	{r4, r5, r7, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40000000 	.word	0x40000000
 80015c0:	43dc0000 	.word	0x43dc0000

080015c4 <generateFrequencyArray>:
void generateFrequencyArray()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	for (int octave = 0; octave < 8; ++octave)
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	e01d      	b.n	800160c <generateFrequencyArray+0x48>
    {
        for (int noteIndex = 0; noteIndex < 12; ++noteIndex)
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	e014      	b.n	8001600 <generateFrequencyArray+0x3c>
        {
            frequencyArray[octave][noteIndex] = calculateNoteFrequency(noteIndex, octave);
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f7ff ffad 	bl	8001538 <calculateNoteFrequency>
 80015de:	eef0 7a40 	vmov.f32	s15, s0
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <generateFrequencyArray+0x58>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	edc3 7a00 	vstr	s15, [r3]
        for (int noteIndex = 0; noteIndex < 12; ++noteIndex)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b0b      	cmp	r3, #11
 8001604:	dde7      	ble.n	80015d6 <generateFrequencyArray+0x12>
	for (int octave = 0; octave < 8; ++octave)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b07      	cmp	r3, #7
 8001610:	ddde      	ble.n	80015d0 <generateFrequencyArray+0xc>
        }
    }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200031d8 	.word	0x200031d8

08001620 <findClosestNote>:
void findClosestNote(float inputFrequency, char* closestNote, float* error)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b098      	sub	sp, #96	; 0x60
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a03 	vstr	s0, [r7, #12]
 800162a:	60b8      	str	r0, [r7, #8]
 800162c:	6079      	str	r1, [r7, #4]
    const char* noteNames[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <findClosestNote+0x10c>)
 8001630:	f107 0410 	add.w	r4, r7, #16
 8001634:	461d      	mov	r5, r3
 8001636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int numNotes = 12;
 8001646:	230c      	movs	r3, #12
 8001648:	653b      	str	r3, [r7, #80]	; 0x50
    const int numOctaves = 9;
 800164a:	2309      	movs	r3, #9
 800164c:	64fb      	str	r3, [r7, #76]	; 0x4c

    float closestFrequency = frequencyArray[0][0];
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <findClosestNote+0x110>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
    float abs_error = fabsf(inputFrequency - closestFrequency);
 8001654:	ed97 7a03 	vldr	s14, [r7, #12]
 8001658:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	eef0 7ae7 	vabs.f32	s15, s15
 8001664:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    *closestNote = '\0';
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

    for (int octave = 0; octave < numOctaves; octave++)
 800166e:	2300      	movs	r3, #0
 8001670:	65bb      	str	r3, [r7, #88]	; 0x58
 8001672:	e041      	b.n	80016f8 <findClosestNote+0xd8>
    {
        for (int noteIndex = 0; noteIndex < numNotes; noteIndex++)
 8001674:	2300      	movs	r3, #0
 8001676:	657b      	str	r3, [r7, #84]	; 0x54
 8001678:	e037      	b.n	80016ea <findClosestNote+0xca>
        {
            float currentFrequency = frequencyArray[octave][noteIndex];
 800167a:	492d      	ldr	r1, [pc, #180]	; (8001730 <findClosestNote+0x110>)
 800167c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
            float currentError = fabsf(inputFrequency - currentFrequency);
 8001692:	ed97 7a03 	vldr	s14, [r7, #12]
 8001696:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	eef0 7ae7 	vabs.f32	s15, s15
 80016a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            if (currentError < abs_error)
 80016a6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d515      	bpl.n	80016e4 <findClosestNote+0xc4>
            {
                abs_error = currentError;
 80016b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                *error = inputFrequency - currentFrequency;
 80016bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edc3 7a00 	vstr	s15, [r3]
                sprintf(closestNote, "%s%d", noteNames[noteIndex], octave);
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	3360      	adds	r3, #96	; 0x60
 80016d4:	443b      	add	r3, r7
 80016d6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80016da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016dc:	4915      	ldr	r1, [pc, #84]	; (8001734 <findClosestNote+0x114>)
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f004 fa84 	bl	8005bec <siprintf>
        for (int noteIndex = 0; noteIndex < numNotes; noteIndex++)
 80016e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e6:	3301      	adds	r3, #1
 80016e8:	657b      	str	r3, [r7, #84]	; 0x54
 80016ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbc3      	blt.n	800167a <findClosestNote+0x5a>
    for (int octave = 0; octave < numOctaves; octave++)
 80016f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016f4:	3301      	adds	r3, #1
 80016f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80016f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbb9      	blt.n	8001674 <findClosestNote+0x54>
            }
        }
    }
    if ( strlen(closestNote) == 2)
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f7fe fdcd 	bl	80002a0 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	2b02      	cmp	r3, #2
 800170a:	d10b      	bne.n	8001724 <findClosestNote+0x104>
    {
    	strcat(closestNote, " ");
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7fe fdc7 	bl	80002a0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4413      	add	r3, r2
 800171a:	4907      	ldr	r1, [pc, #28]	; (8001738 <findClosestNote+0x118>)
 800171c:	461a      	mov	r2, r3
 800171e:	460b      	mov	r3, r1
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	8013      	strh	r3, [r2, #0]
    }
}
 8001724:	bf00      	nop
 8001726:	3760      	adds	r7, #96	; 0x60
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	0800739c 	.word	0x0800739c
 8001730:	200031d8 	.word	0x200031d8
 8001734:	08007390 	.word	0x08007390
 8001738:	08007398 	.word	0x08007398

0800173c <lcd_tunerDisplay>:
void lcd_tunerDisplay()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 0);
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fca2 	bl	800108c <lcd_put_cur>
	lcd_send_string("frequency: ");
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <lcd_tunerDisplay+0x6c>)
 800174a:	f7ff fd0e 	bl	800116a <lcd_send_string>
	send_float_to_lcd(freqVal);
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <lcd_tunerDisplay+0x70>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	f7ff fd1c 	bl	8001194 <send_float_to_lcd>
	lcd_send_string("Hz  ");
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <lcd_tunerDisplay+0x74>)
 800175e:	f7ff fd04 	bl	800116a <lcd_send_string>
	lcd_put_cur(1, 0);
 8001762:	2100      	movs	r1, #0
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fc91 	bl	800108c <lcd_put_cur>
	lcd_send_string("error: ");
 800176a:	4812      	ldr	r0, [pc, #72]	; (80017b4 <lcd_tunerDisplay+0x78>)
 800176c:	f7ff fcfd 	bl	800116a <lcd_send_string>
	send_float_to_lcd(fabsf(error));
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <lcd_tunerDisplay+0x7c>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef0 7ae7 	vabs.f32	s15, s15
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f7ff fd09 	bl	8001194 <send_float_to_lcd>
	lcd_send_string("Hz ");
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <lcd_tunerDisplay+0x80>)
 8001784:	f7ff fcf1 	bl	800116a <lcd_send_string>
	lcd_put_cur(2, 0);
 8001788:	2100      	movs	r1, #0
 800178a:	2002      	movs	r0, #2
 800178c:	f7ff fc7e 	bl	800108c <lcd_put_cur>
	lcd_send_string("note: ");
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <lcd_tunerDisplay+0x84>)
 8001792:	f7ff fcea 	bl	800116a <lcd_send_string>
	lcd_send_string(closestNote);
 8001796:	480b      	ldr	r0, [pc, #44]	; (80017c4 <lcd_tunerDisplay+0x88>)
 8001798:	f7ff fce7 	bl	800116a <lcd_send_string>
	HAL_Delay(500);
 800179c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a0:	f000 fc46 	bl	8002030 <HAL_Delay>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	080073cc 	.word	0x080073cc
 80017ac:	20003388 	.word	0x20003388
 80017b0:	080073d8 	.word	0x080073d8
 80017b4:	080073e0 	.word	0x080073e0
 80017b8:	20003390 	.word	0x20003390
 80017bc:	080073e8 	.word	0x080073e8
 80017c0:	080073ec 	.word	0x080073ec
 80017c4:	2000338c 	.word	0x2000338c

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017cc:	f000 fbbe 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d0:	f000 f84e 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f000 f97e 	bl	8001ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017d8:	f000 f95c 	bl	8001a94 <MX_DMA_Init>
  MX_ADC1_Init();
 80017dc:	f000 f8b0 	bl	8001940 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80017e0:	f000 f92e 	bl	8001a40 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80017e4:	f000 f8fe 	bl	80019e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80017e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ec:	4816      	ldr	r0, [pc, #88]	; (8001848 <main+0x80>)
 80017ee:	f003 f9f7 	bl	8004be0 <arm_rfft_fast_init_f32>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, ADC_BUFFER_SIZE);
 80017f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f6:	4915      	ldr	r1, [pc, #84]	; (800184c <main+0x84>)
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <main+0x88>)
 80017fa:	f000 fc81 	bl	8002100 <HAL_ADC_Start_DMA>
  samplingRate = calculateSamplingRate();
 80017fe:	f7ff fd77 	bl	80012f0 <calculateSamplingRate>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <main+0x8c>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
  generateFrequencyArray(frequencyArray, 9);
 800180c:	2109      	movs	r1, #9
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <main+0x90>)
 8001810:	f7ff fed8 	bl	80015c4 <generateFrequencyArray>
  lcd_init();
 8001814:	f7ff fc6c 	bl	80010f0 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(processFlag)
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <main+0x94>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <main+0x5c>
		{
			Processing();
 8001820:	f7ff fdce 	bl	80013c0 <Processing>
		}

		if(fftDoneFlag)
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <main+0x98>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <main+0x7a>
		{
			freqCalculate();
 800182c:	f7ff fe02 	bl	8001434 <freqCalculate>
			findClosestNote(freqVal, closestNote, &error);
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <main+0x9c>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <main+0xa0>)
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <main+0xa4>)
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	f7ff feef 	bl	8001620 <findClosestNote>
		}
		lcd_tunerDisplay();
 8001842:	f7ff ff7b 	bl	800173c <lcd_tunerDisplay>
		if(processFlag)
 8001846:	e7e7      	b.n	8001818 <main+0x50>
 8001848:	20003394 	.word	0x20003394
 800184c:	200001d4 	.word	0x200001d4
 8001850:	20000090 	.word	0x20000090
 8001854:	200001d0 	.word	0x200001d0
 8001858:	200031d8 	.word	0x200031d8
 800185c:	200021d4 	.word	0x200021d4
 8001860:	200021d5 	.word	0x200021d5
 8001864:	20003388 	.word	0x20003388
 8001868:	20003390 	.word	0x20003390
 800186c:	2000338c 	.word	0x2000338c

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f9ac 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <SystemClock_Config+0xc8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <SystemClock_Config+0xc8>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <SystemClock_Config+0xc8>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <SystemClock_Config+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a20      	ldr	r2, [pc, #128]	; (800193c <SystemClock_Config+0xcc>)
 80018ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <SystemClock_Config+0xcc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d6:	2302      	movs	r3, #2
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018e0:	2304      	movs	r3, #4
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ec:	2304      	movs	r3, #4
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fa19 	bl	8003d2c <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001900:	f000 f938 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2103      	movs	r1, #3
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fc7b 	bl	800421c <HAL_RCC_ClockConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800192c:	f000 f922 	bl	8001b74 <Error_Handler>
  }
}
 8001930:	bf00      	nop
 8001932:	3750      	adds	r7, #80	; 0x50
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001954:	4a21      	ldr	r2, [pc, #132]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <MX_ADC1_Init+0x98>)
 800195a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_ADC1_Init+0x98>)
 800196e:	2201      	movs	r2, #1
 8001970:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_ADC1_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <MX_ADC1_Init+0xa0>)
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_ADC1_Init+0x98>)
 800198e:	2201      	movs	r2, #1
 8001990:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_ADC1_Init+0x98>)
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_ADC1_Init+0x98>)
 800199c:	2201      	movs	r2, #1
 800199e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <MX_ADC1_Init+0x98>)
 80019a2:	f000 fb69 	bl	8002078 <HAL_ADC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019ac:	f000 f8e2 	bl	8001b74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019b8:	2307      	movs	r3, #7
 80019ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_ADC1_Init+0x98>)
 80019c2:	f000 fc97 	bl	80022f4 <HAL_ADC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019cc:	f000 f8d2 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000090 	.word	0x20000090
 80019dc:	40012000 	.word	0x40012000
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C2_Init+0x50>)
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <MX_I2C2_Init+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C2_Init+0x50>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_I2C2_Init+0x58>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C2_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_I2C2_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_I2C2_Init+0x50>)
 8001a22:	f001 fd37 	bl	8003494 <HAL_I2C_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a2c:	f000 f8a2 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000138 	.word	0x20000138
 8001a38:	40005800 	.word	0x40005800
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART2_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a78:	f002 fdf0 	bl	800465c <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f877 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000018c 	.word	0x2000018c
 8001a90:	40004400 	.word	0x40004400

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_DMA_Init+0x3c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2038      	movs	r0, #56	; 0x38
 8001abc:	f000 ffa5 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac0:	2038      	movs	r0, #56	; 0x38
 8001ac2:	f000 ffbe 	bl	8002a42 <HAL_NVIC_EnableIRQ>

}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_GPIO_Init+0x98>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2120      	movs	r1, #32
 8001b42:	480b      	ldr	r0, [pc, #44]	; (8001b70 <MX_GPIO_Init+0x9c>)
 8001b44:	f001 fc8c 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_GPIO_Init+0x9c>)
 8001b60:	f001 fafa 	bl	8003158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_ADC_MspInit+0xdc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d158      	bne.n	8001ca4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_ADC_MspInit+0xe0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <HAL_ADC_MspInit+0xe4>)
 8001c3e:	f001 fa8b 	bl	8003158 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_ADC_MspInit+0xec>)
 8001c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c8a:	f000 fef5 	bl	8002a78 <HAL_DMA_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c94:	f7ff ff6e 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_ADC_MspInit+0xe8>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	200000d8 	.word	0x200000d8
 8001cbc:	40026410 	.word	0x40026410

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_I2C_MspInit+0xa4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d13c      	bne.n	8001d5c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d10:	2304      	movs	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <HAL_I2C_MspInit+0xac>)
 8001d1c:	f001 fa1c 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d20:	2308      	movs	r3, #8
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d24:	2312      	movs	r3, #18
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d30:	2309      	movs	r3, #9
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480c      	ldr	r0, [pc, #48]	; (8001d6c <HAL_I2C_MspInit+0xac>)
 8001d3c:	f001 fa0c 	bl	8003158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005800 	.word	0x40005800
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_UART_MspInit+0x84>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12b      	bne.n	8001dea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_UART_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_UART_MspInit+0x8c>)
 8001de6:	f001 f9b7 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40004400 	.word	0x40004400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f8d0 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <DMA2_Stream0_IRQHandler+0x10>)
 8001e5a:	f000 ff13 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000d8 	.word	0x200000d8

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f003 fe76 	bl	8005b88 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20020000 	.word	0x20020000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	200073ac 	.word	0x200073ac
 8001ed0:	200073c8 	.word	0x200073c8

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f14:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f22:	f7ff ffd7 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f003 fe35 	bl	8005b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7ff fc4d 	bl	80017c8 <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f3c:	0801a8e0 	.word	0x0801a8e0
  ldr r2, =_sbss
 8001f40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f44:	200073c4 	.word	0x200073c4

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fd3d 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fdfe 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fd55 	bl	8002a5e <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 fd1d 	bl	8002a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	20000008 	.word	0x20000008

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	2000000c 	.word	0x2000000c
 8002014:	200073b0 	.word	0x200073b0

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200073b0 	.word	0x200073b0

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000000c 	.word	0x2000000c

08002078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e033      	b.n	80020f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fd9a 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	f043 0202 	orr.w	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa44 	bl	8002558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
 80020e6:	e001      	b.n	80020ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Start_DMA+0x1e>
 800211a:	2302      	movs	r3, #2
 800211c:	e0ce      	b.n	80022bc <HAL_ADC_Start_DMA+0x1bc>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d018      	beq.n	8002166 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_ADC_Start_DMA+0x1c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_ADC_Start_DMA+0x1c8>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3b01      	subs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002174:	d107      	bne.n	8002186 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 8086 	bne.w	80022a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	d106      	bne.n	80021e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f023 0206 	bic.w	r2, r3, #6
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
 80021e2:	e002      	b.n	80021ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_ADC_Start_DMA+0x1cc>)
 80021f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <HAL_ADC_Start_DMA+0x1d0>)
 80021fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_ADC_Start_DMA+0x1d4>)
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_ADC_Start_DMA+0x1d8>)
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002216:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002226:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002236:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	334c      	adds	r3, #76	; 0x4c
 8002242:	4619      	mov	r1, r3
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f000 fcc4 	bl	8002bd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10f      	bne.n	8002278 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d129      	bne.n	80022ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	e020      	b.n	80022ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_ADC_Start_DMA+0x1dc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d11b      	bne.n	80022ba <HAL_ADC_Start_DMA+0x1ba>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d114      	bne.n	80022ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e00b      	b.n	80022ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000004 	.word	0x20000004
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	40012300 	.word	0x40012300
 80022d0:	08002751 	.word	0x08002751
 80022d4:	0800280b 	.word	0x0800280b
 80022d8:	08002827 	.word	0x08002827
 80022dc:	40012000 	.word	0x40012000

080022e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e113      	b.n	8002538 <HAL_ADC_ConfigChannel+0x244>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d925      	bls.n	800236c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	4603      	mov	r3, r0
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	3b1e      	subs	r3, #30
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e022      	b.n	80023b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	2207      	movs	r2, #7
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4403      	add	r3, r0
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d824      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	221f      	movs	r2, #31
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b05      	subs	r3, #5
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
 8002402:	e04c      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d824      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b23      	subs	r3, #35	; 0x23
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b23      	subs	r3, #35	; 0x23
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	e023      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b41      	subs	r3, #65	; 0x41
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b41      	subs	r3, #65	; 0x41
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_ADC_ConfigChannel+0x250>)
 80024a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_ADC_ConfigChannel+0x258>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x1f4>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d122      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_ADC_ConfigChannel+0x258>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d111      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_ADC_ConfigChannel+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_ADC_ConfigChannel+0x260>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9a      	lsrs	r2, r3, #18
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	40012000 	.word	0x40012000
 800254c:	10000012 	.word	0x10000012
 8002550:	20000004 	.word	0x20000004
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002560:	4b79      	ldr	r3, [pc, #484]	; (8002748 <ADC_Init+0x1f0>)
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800258c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	021a      	lsls	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	4a58      	ldr	r2, [pc, #352]	; (800274c <ADC_Init+0x1f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e00f      	b.n	8002656 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0202 	bic.w	r2, r2, #2
 8002664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
 8002670:	005a      	lsls	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01b      	beq.n	80026bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	3b01      	subs	r3, #1
 80026b0:	035a      	lsls	r2, r3, #13
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e007      	b.n	80026cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	051a      	lsls	r2, r3, #20
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800270e:	025a      	lsls	r2, r3, #9
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	029a      	lsls	r2, r3, #10
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40012300 	.word	0x40012300
 800274c:	0f000001 	.word	0x0f000001

08002750 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d13c      	bne.n	80027e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d12b      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d127      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d119      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7fe fdc3 	bl	8001368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027e2:	e00e      	b.n	8002802 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fd75 	bl	80022e0 <HAL_ADC_ErrorCallback>
}
 80027f6:	e004      	b.n	8002802 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7fe fdbb 	bl	8001394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fd4a 	bl	80022e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff29 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff3e 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff8e 	bl	8002948 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5d 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff31 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffa2 	bl	80029b0 <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fac8 	bl	8002018 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e099      	b.n	8002bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	e00f      	b.n	8002ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab6:	f7ff faaf 	bl	8002018 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d908      	bls.n	8002ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e078      	b.n	8002bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e8      	bne.n	8002ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_DMA_Init+0x158>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d117      	bne.n	8002b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa6f 	bl	8003060 <DMA_CheckFifoParam>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b96:	2301      	movs	r3, #1
 8002b98:	e016      	b.n	8002bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa26 	bl	8002ff4 <DMA_CalcBaseAndBitshift>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	223f      	movs	r2, #63	; 0x3f
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	f010803f 	.word	0xf010803f

08002bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Start_IT+0x26>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e040      	b.n	8002c7c <HAL_DMA_Start_IT+0xa8>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d12f      	bne.n	8002c6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f9b8 	bl	8002f98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	223f      	movs	r2, #63	; 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0216 	orr.w	r2, r2, #22
 8002c42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e005      	b.n	8002c7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c90:	4b8e      	ldr	r3, [pc, #568]	; (8002ecc <HAL_DMA_IRQHandler+0x248>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a8e      	ldr	r2, [pc, #568]	; (8002ed0 <HAL_DMA_IRQHandler+0x24c>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0a9b      	lsrs	r3, r3, #10
 8002c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	2208      	movs	r2, #8
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	2208      	movs	r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	2201      	movs	r2, #1
 8002d14:	409a      	lsls	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2204      	movs	r2, #4
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2210      	movs	r2, #16
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d043      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03c      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	2210      	movs	r2, #16
 8002d80:	409a      	lsls	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e01f      	b.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e016      	b.n	8002df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0208 	bic.w	r2, r2, #8
 8002de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	2220      	movs	r2, #32
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 808f 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8087 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d136      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0216 	bic.w	r2, r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_DMA_IRQHandler+0x1da>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	223f      	movs	r2, #63	; 0x3f
 8002e74:	409a      	lsls	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d07e      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
        }
        return;
 8002e9a:	e079      	b.n	8002f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d031      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
 8002ec8:	e02c      	b.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
 8002eca:	bf00      	nop
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d023      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e01e      	b.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0210 	bic.w	r2, r2, #16
 8002f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d032      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d307      	bcc.n	8002f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f2      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x2cc>
 8002f6a:	e000      	b.n	8002f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
 8002f8e:	e000      	b.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f90:	bf00      	nop
    }
  }
}
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d108      	bne.n	8002fd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fd6:	e007      	b.n	8002fe8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3b10      	subs	r3, #16
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <DMA_CalcBaseAndBitshift+0x64>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <DMA_CalcBaseAndBitshift+0x68>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d909      	bls.n	8003036 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	; 0x58
 8003034:	e007      	b.n	8003046 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	aaaaaaab 	.word	0xaaaaaaab
 800305c:	0800740c 	.word	0x0800740c

08003060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11f      	bne.n	80030ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d856      	bhi.n	800312e <DMA_CheckFifoParam+0xce>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <DMA_CheckFifoParam+0x28>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	08003099 	.word	0x08003099
 800308c:	080030ab 	.word	0x080030ab
 8003090:	08003099 	.word	0x08003099
 8003094:	0800312f 	.word	0x0800312f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d046      	beq.n	8003132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e043      	b.n	8003132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b2:	d140      	bne.n	8003136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e03d      	b.n	8003136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	d121      	bne.n	8003108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d837      	bhi.n	800313a <DMA_CheckFifoParam+0xda>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <DMA_CheckFifoParam+0x70>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030e7 	.word	0x080030e7
 80030d8:	080030e1 	.word	0x080030e1
 80030dc:	080030f9 	.word	0x080030f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e030      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d025      	beq.n	800313e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e022      	b.n	800313e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003100:	d11f      	bne.n	8003142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003106:	e01c      	b.n	8003142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d903      	bls.n	8003116 <DMA_CheckFifoParam+0xb6>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d003      	beq.n	800311c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003114:	e018      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      break;
 800311a:	e015      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e00b      	b.n	8003146 <DMA_CheckFifoParam+0xe6>
      break;
 800312e:	bf00      	nop
 8003130:	e00a      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e008      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e006      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;   
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
    }
  } 
  
  return status; 
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e159      	b.n	8003428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8148 	bne.w	8003422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d130      	bne.n	800320c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0201 	and.w	r2, r3, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b03      	cmp	r3, #3
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a2 	beq.w	8003422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b57      	ldr	r3, [pc, #348]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_GPIO_Init+0x2ec>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a49      	ldr	r2, [pc, #292]	; (8003448 <HAL_GPIO_Init+0x2f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x202>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <HAL_GPIO_Init+0x2f4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x1fe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a47      	ldr	r2, [pc, #284]	; (8003450 <HAL_GPIO_Init+0x2f8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_GPIO_Init+0x2fc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x1f6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a45      	ldr	r2, [pc, #276]	; (8003458 <HAL_GPIO_Init+0x300>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x1f2>
 8003346:	2304      	movs	r3, #4
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334a:	2307      	movs	r3, #7
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x204>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	; (8003444 <HAL_GPIO_Init+0x2ec>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_GPIO_Init+0x304>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_GPIO_Init+0x304>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_GPIO_Init+0x304>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <HAL_GPIO_Init+0x304>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_GPIO_Init+0x304>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_GPIO_Init+0x304>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_GPIO_Init+0x304>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_GPIO_Init+0x304>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f aea2 	bls.w	8003174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40013c00 	.word	0x40013c00

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800347c:	e003      	b.n	8003486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e12b      	b.n	80036fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fc00 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f8:	f001 f888 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 80034fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a81      	ldr	r2, [pc, #516]	; (8003708 <HAL_I2C_Init+0x274>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d807      	bhi.n	8003518 <HAL_I2C_Init+0x84>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a80      	ldr	r2, [pc, #512]	; (800370c <HAL_I2C_Init+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e006      	b.n	8003526 <HAL_I2C_Init+0x92>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a7d      	ldr	r2, [pc, #500]	; (8003710 <HAL_I2C_Init+0x27c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	bf94      	ite	ls
 8003520:	2301      	movls	r3, #1
 8003522:	2300      	movhi	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0e7      	b.n	80036fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a78      	ldr	r2, [pc, #480]	; (8003714 <HAL_I2C_Init+0x280>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0c9b      	lsrs	r3, r3, #18
 8003538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_I2C_Init+0x274>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d802      	bhi.n	8003568 <HAL_I2C_Init+0xd4>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3301      	adds	r3, #1
 8003566:	e009      	b.n	800357c <HAL_I2C_Init+0xe8>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	4a69      	ldr	r2, [pc, #420]	; (8003718 <HAL_I2C_Init+0x284>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	3301      	adds	r3, #1
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800358e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	495c      	ldr	r1, [pc, #368]	; (8003708 <HAL_I2C_Init+0x274>)
 8003598:	428b      	cmp	r3, r1
 800359a:	d819      	bhi.n	80035d0 <HAL_I2C_Init+0x13c>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e59      	subs	r1, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035b0:	400b      	ands	r3, r1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_I2C_Init+0x138>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1e59      	subs	r1, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ca:	e051      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 80035cc:	2304      	movs	r3, #4
 80035ce:	e04f      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_I2C_Init+0x168>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e012      	b.n	8003622 <HAL_I2C_Init+0x18e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x196>
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_I2C_Init+0x1bc>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1e58      	subs	r0, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	440b      	add	r3, r1
 8003640:	fbb0 f3f3 	udiv	r3, r0, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	6809      	ldr	r1, [r1, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800369e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6911      	ldr	r1, [r2, #16]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	000186a0 	.word	0x000186a0
 800370c:	001e847f 	.word	0x001e847f
 8003710:	003d08ff 	.word	0x003d08ff
 8003714:	431bde83 	.word	0x431bde83
 8003718:	10624dd3 	.word	0x10624dd3

0800371c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	460b      	mov	r3, r1
 800372a:	817b      	strh	r3, [r7, #10]
 800372c:	4613      	mov	r3, r2
 800372e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7fe fc72 	bl	8002018 <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	f040 80e0 	bne.w	8003904 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	4970      	ldr	r1, [pc, #448]	; (8003910 <HAL_I2C_Master_Transmit+0x1f4>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f964 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	e0d3      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Master_Transmit+0x50>
 8003768:	2302      	movs	r3, #2
 800376a:	e0cc      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2221      	movs	r2, #33	; 0x21
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_I2C_Master_Transmit+0x1f8>)
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f89c 	bl	8003918 <I2C_MasterRequestWrite>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e08d      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003800:	e066      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f9de 	bl	8003bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d11b      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0x188>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6a39      	ldr	r1, [r7, #32]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f9ce 	bl	8003c4a <I2C_WaitOnBTFFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d107      	bne.n	80038cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01a      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d194      	bne.n	8003802 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000

08003918 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d006      	beq.n	8003942 <I2C_MasterRequestWrite+0x2a>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d003      	beq.n	8003942 <I2C_MasterRequestWrite+0x2a>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003940:	d108      	bne.n	8003954 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e00b      	b.n	800396c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b12      	cmp	r3, #18
 800395a:	d107      	bne.n	800396c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f84f 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d103      	bne.n	800399c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e035      	b.n	8003a0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a8:	d108      	bne.n	80039bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039aa:	897b      	ldrh	r3, [r7, #10]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b8:	611a      	str	r2, [r3, #16]
 80039ba:	e01b      	b.n	80039f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	11db      	asrs	r3, r3, #7
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f063 030f 	orn	r3, r3, #15
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <I2C_MasterRequestWrite+0xfc>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f875 	bl	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e010      	b.n	8003a0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ea:	897b      	ldrh	r3, [r7, #10]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <I2C_MasterRequestWrite+0x100>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f865 	bl	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010008 	.word	0x00010008
 8003a18:	00010002 	.word	0x00010002

08003a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2c:	e025      	b.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d021      	beq.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7fe faef 	bl	8002018 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d116      	bne.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e023      	b.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10d      	bne.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	e00c      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0b6      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad8:	e051      	b.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae8:	d123      	bne.n	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e046      	b.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d021      	beq.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fa6d 	bl	8002018 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e020      	b.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10c      	bne.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e00b      	b.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d18d      	bne.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd4:	e02d      	b.n	8003c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f878 	bl	8003ccc <I2C_IsAcknowledgeFailed>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e02d      	b.n	8003c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d021      	beq.n	8003c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fe fa13 	bl	8002018 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d116      	bne.n	8003c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0220 	orr.w	r2, r3, #32
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e007      	b.n	8003c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d1ca      	bne.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c56:	e02d      	b.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f837 	bl	8003ccc <I2C_IsAcknowledgeFailed>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e02d      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d021      	beq.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c70:	f7fe f9d2 	bl	8002018 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d116      	bne.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d1ca      	bne.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d11b      	bne.n	8003d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e267      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d075      	beq.n	8003e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b82      	ldr	r3, [pc, #520]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e242      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x74>
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6f      	ldr	r2, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6c      	ldr	r2, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a68      	ldr	r2, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a65      	ldr	r2, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe f918 	bl	8002018 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe f914 	bl	8002018 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e207      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f904 	bl	8002018 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe f900 	bl	8002018 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1f3      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e1c7      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4937      	ldr	r1, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	e03a      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <HAL_RCC_OscConfig+0x244>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe f8b9 	bl	8002018 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fe f8b5 	bl	8002018 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e1a8      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec8:	4b28      	ldr	r3, [pc, #160]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4925      	ldr	r1, [pc, #148]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e015      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCC_OscConfig+0x244>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f898 	bl	8002018 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fe f894 	bl	8002018 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e187      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d036      	beq.n	8003f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_RCC_OscConfig+0x248>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe f878 	bl	8002018 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe f874 	bl	8002018 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e167      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_OscConfig+0x240>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x200>
 8003f4a:	e01b      	b.n	8003f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_OscConfig+0x248>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe f861 	bl	8002018 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e00e      	b.n	8003f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe f85d 	bl	8002018 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d907      	bls.n	8003f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e150      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	42470000 	.word	0x42470000
 8003f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ea      	bne.n	8003f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8097 	beq.w	80040c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	4b7d      	ldr	r3, [pc, #500]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a7c      	ldr	r2, [pc, #496]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b7a      	ldr	r3, [pc, #488]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b77      	ldr	r3, [pc, #476]	; (80041a0 <HAL_RCC_OscConfig+0x474>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d118      	bne.n	8004000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fce:	4b74      	ldr	r3, [pc, #464]	; (80041a0 <HAL_RCC_OscConfig+0x474>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a73      	ldr	r2, [pc, #460]	; (80041a0 <HAL_RCC_OscConfig+0x474>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fda:	f7fe f81d 	bl	8002018 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe2:	f7fe f819 	bl	8002018 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e10c      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b6a      	ldr	r3, [pc, #424]	; (80041a0 <HAL_RCC_OscConfig+0x474>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d106      	bne.n	8004016 <HAL_RCC_OscConfig+0x2ea>
 8004008:	4b64      	ldr	r3, [pc, #400]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a63      	ldr	r2, [pc, #396]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	e01c      	b.n	8004050 <HAL_RCC_OscConfig+0x324>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0x30c>
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5e      	ldr	r2, [pc, #376]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b5c      	ldr	r3, [pc, #368]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a5b      	ldr	r2, [pc, #364]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0x324>
 8004038:	4b58      	ldr	r3, [pc, #352]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a57      	ldr	r2, [pc, #348]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b55      	ldr	r3, [pc, #340]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_RCC_OscConfig+0x470>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd ffde 	bl	8002018 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fd ffda 	bl	8002018 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0cb      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	4b49      	ldr	r3, [pc, #292]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ee      	beq.n	8004060 <HAL_RCC_OscConfig+0x334>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fd ffc8 	bl	8002018 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fd ffc4 	bl	8002018 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e0b5      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a2:	4b3e      	ldr	r3, [pc, #248]	; (800419c <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ee      	bne.n	800408c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_RCC_OscConfig+0x470>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a38      	ldr	r2, [pc, #224]	; (800419c <HAL_RCC_OscConfig+0x470>)
 80040ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80a1 	beq.w	800420c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ca:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCC_OscConfig+0x470>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d05c      	beq.n	8004190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d141      	bne.n	8004162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_OscConfig+0x478>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd ff98 	bl	8002018 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd ff94 	bl	8002018 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e087      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	491b      	ldr	r1, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x478>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd ff6d 	bl	8002018 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd ff69 	bl	8002018 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e05c      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x416>
 8004160:	e054      	b.n	800420c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_RCC_OscConfig+0x478>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd ff56 	bl	8002018 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd ff52 	bl	8002018 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e045      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_OscConfig+0x470>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x444>
 800418e:	e03d      	b.n	800420c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e038      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_OscConfig+0x4ec>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d028      	beq.n	8004208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d121      	bne.n	8004208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d11a      	bne.n	8004208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d111      	bne.n	8004208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	3b01      	subs	r3, #1
 80041f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0cc      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b68      	ldr	r3, [pc, #416]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d90c      	bls.n	8004258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b65      	ldr	r3, [pc, #404]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0b8      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004270:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a58      	ldr	r2, [pc, #352]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004288:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	494d      	ldr	r1, [pc, #308]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d044      	beq.n	800433c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d119      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07f      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d003      	beq.n	80042da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e06f      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ea:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e067      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4934      	ldr	r1, [pc, #208]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800430c:	f7fd fe84 	bl	8002018 <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	e00a      	b.n	800432a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004314:	f7fd fe80 	bl	8002018 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e04f      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 020c 	and.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	429a      	cmp	r2, r3
 800433a:	d1eb      	bne.n	8004314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d20c      	bcs.n	8004364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e032      	b.n	80043ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4916      	ldr	r1, [pc, #88]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	490e      	ldr	r1, [pc, #56]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043a2:	f000 f821 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	490a      	ldr	r1, [pc, #40]	; (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	5ccb      	ldrb	r3, [r1, r3]
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd fde4 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023c00 	.word	0x40023c00
 80043d8:	40023800 	.word	0x40023800
 80043dc:	080073f4 	.word	0x080073f4
 80043e0:	20000004 	.word	0x20000004
 80043e4:	20000008 	.word	0x20000008

080043e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b094      	sub	sp, #80	; 0x50
 80043ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	647b      	str	r3, [r7, #68]	; 0x44
 80043f4:	2300      	movs	r3, #0
 80043f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f8:	2300      	movs	r3, #0
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004400:	4b79      	ldr	r3, [pc, #484]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b08      	cmp	r3, #8
 800440a:	d00d      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x40>
 800440c:	2b08      	cmp	r3, #8
 800440e:	f200 80e1 	bhi.w	80045d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x34>
 8004416:	2b04      	cmp	r3, #4
 8004418:	d003      	beq.n	8004422 <HAL_RCC_GetSysClockFreq+0x3a>
 800441a:	e0db      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_GetSysClockFreq+0x204>)
 800441e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004420:	e0db      	b.n	80045da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004422:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004426:	e0d8      	b.n	80045da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004428:	4b6f      	ldr	r3, [pc, #444]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443e:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	099b      	lsrs	r3, r3, #6
 8004444:	2200      	movs	r2, #0
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
 8004448:	63fa      	str	r2, [r7, #60]	; 0x3c
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	633b      	str	r3, [r7, #48]	; 0x30
 8004452:	2300      	movs	r3, #0
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
 8004456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800445a:	4622      	mov	r2, r4
 800445c:	462b      	mov	r3, r5
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	0159      	lsls	r1, r3, #5
 8004468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800446c:	0150      	lsls	r0, r2, #5
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4621      	mov	r1, r4
 8004474:	1a51      	subs	r1, r2, r1
 8004476:	6139      	str	r1, [r7, #16]
 8004478:	4629      	mov	r1, r5
 800447a:	eb63 0301 	sbc.w	r3, r3, r1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800448c:	4659      	mov	r1, fp
 800448e:	018b      	lsls	r3, r1, #6
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004496:	4651      	mov	r1, sl
 8004498:	018a      	lsls	r2, r1, #6
 800449a:	4651      	mov	r1, sl
 800449c:	ebb2 0801 	subs.w	r8, r2, r1
 80044a0:	4659      	mov	r1, fp
 80044a2:	eb63 0901 	sbc.w	r9, r3, r1
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ba:	4690      	mov	r8, r2
 80044bc:	4699      	mov	r9, r3
 80044be:	4623      	mov	r3, r4
 80044c0:	eb18 0303 	adds.w	r3, r8, r3
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	462b      	mov	r3, r5
 80044c8:	eb49 0303 	adc.w	r3, r9, r3
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044da:	4629      	mov	r1, r5
 80044dc:	024b      	lsls	r3, r1, #9
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e4:	4621      	mov	r1, r4
 80044e6:	024a      	lsls	r2, r1, #9
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	2200      	movs	r2, #0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f8:	f7fc fbe6 	bl	8000cc8 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4613      	mov	r3, r2
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	e058      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004506:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	2200      	movs	r2, #0
 800450e:	4618      	mov	r0, r3
 8004510:	4611      	mov	r1, r2
 8004512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	0159      	lsls	r1, r3, #5
 800452e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004532:	0150      	lsls	r0, r2, #5
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4641      	mov	r1, r8
 800453a:	ebb2 0a01 	subs.w	sl, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb63 0b01 	sbc.w	fp, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004558:	ebb2 040a 	subs.w	r4, r2, sl
 800455c:	eb63 050b 	sbc.w	r5, r3, fp
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	00eb      	lsls	r3, r5, #3
 800456a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456e:	00e2      	lsls	r2, r4, #3
 8004570:	4614      	mov	r4, r2
 8004572:	461d      	mov	r5, r3
 8004574:	4643      	mov	r3, r8
 8004576:	18e3      	adds	r3, r4, r3
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	464b      	mov	r3, r9
 800457c:	eb45 0303 	adc.w	r3, r5, r3
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800458e:	4629      	mov	r1, r5
 8004590:	028b      	lsls	r3, r1, #10
 8004592:	4621      	mov	r1, r4
 8004594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004598:	4621      	mov	r1, r4
 800459a:	028a      	lsls	r2, r1, #10
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	61fa      	str	r2, [r7, #28]
 80045a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ac:	f7fc fb8c 	bl	8000cc8 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	3301      	adds	r3, #1
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d2:	e002      	b.n	80045da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetSysClockFreq+0x204>)
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3750      	adds	r7, #80	; 0x50
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	007a1200 	.word	0x007a1200

080045f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <HAL_RCC_GetHCLKFreq+0x14>)
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004610:	f7ff fff0 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0a9b      	lsrs	r3, r3, #10
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4903      	ldr	r1, [pc, #12]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	08007404 	.word	0x08007404

08004634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004638:	f7ff ffdc 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0b5b      	lsrs	r3, r3, #13
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	08007404 	.word	0x08007404

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fd fb74 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f829 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b0c0      	sub	sp, #256	; 0x100
 80046fe:	af00      	add	r7, sp, #0
 8004700:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	68d9      	ldr	r1, [r3, #12]
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	ea40 0301 	orr.w	r3, r0, r1
 8004720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004750:	f021 010c 	bic.w	r1, r1, #12
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	6999      	ldr	r1, [r3, #24]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	ea40 0301 	orr.w	r3, r0, r1
 800477e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <UART_SetConfig+0x2cc>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d005      	beq.n	8004798 <UART_SetConfig+0xa0>
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <UART_SetConfig+0x2d0>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d104      	bne.n	80047a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7ff ff4c 	bl	8004634 <HAL_RCC_GetPCLK2Freq>
 800479c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047a0:	e003      	b.n	80047aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a2:	f7ff ff33 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 80047a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	f040 810c 	bne.w	80049d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	1891      	adds	r1, r2, r2
 80047d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047d2:	415b      	adcs	r3, r3
 80047d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047da:	4621      	mov	r1, r4
 80047dc:	eb12 0801 	adds.w	r8, r2, r1
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb43 0901 	adc.w	r9, r3, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	eb18 0303 	adds.w	r3, r8, r3
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004808:	462b      	mov	r3, r5
 800480a:	eb49 0303 	adc.w	r3, r9, r3
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004826:	460b      	mov	r3, r1
 8004828:	18db      	adds	r3, r3, r3
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	4613      	mov	r3, r2
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	657b      	str	r3, [r7, #84]	; 0x54
 8004834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800483c:	f7fc fa44 	bl	8000cc8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b61      	ldr	r3, [pc, #388]	; (80049cc <UART_SetConfig+0x2d4>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011c      	lsls	r4, r3, #4
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004858:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800485c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	64b9      	str	r1, [r7, #72]	; 0x48
 8004868:	415b      	adcs	r3, r3
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800486c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004870:	4641      	mov	r1, r8
 8004872:	eb12 0a01 	adds.w	sl, r2, r1
 8004876:	4649      	mov	r1, r9
 8004878:	eb43 0b01 	adc.w	fp, r3, r1
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800488c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004890:	4692      	mov	sl, r2
 8004892:	469b      	mov	fp, r3
 8004894:	4643      	mov	r3, r8
 8004896:	eb1a 0303 	adds.w	r3, sl, r3
 800489a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800489e:	464b      	mov	r3, r9
 80048a0:	eb4b 0303 	adc.w	r3, fp, r3
 80048a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048bc:	460b      	mov	r3, r1
 80048be:	18db      	adds	r3, r3, r3
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
 80048c2:	4613      	mov	r3, r2
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048d2:	f7fc f9f9 	bl	8000cc8 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <UART_SetConfig+0x2d4>)
 80048de:	fba3 2301 	umull	r2, r3, r3, r1
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2264      	movs	r2, #100	; 0x64
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	1acb      	subs	r3, r1, r3
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <UART_SetConfig+0x2d4>)
 80048f4:	fba3 2302 	umull	r2, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004900:	441c      	add	r4, r3
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	63b9      	str	r1, [r7, #56]	; 0x38
 800491c:	415b      	adcs	r3, r3
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6339      	str	r1, [r7, #48]	; 0x30
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004970:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800498a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800498e:	f7fc f99b 	bl	8000cc8 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <UART_SetConfig+0x2d4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <UART_SetConfig+0x2d4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4422      	add	r2, r4
 80049be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049c0:	e105      	b.n	8004bce <UART_SetConfig+0x4d6>
 80049c2:	bf00      	nop
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40011400 	.word	0x40011400
 80049cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049e2:	4642      	mov	r2, r8
 80049e4:	464b      	mov	r3, r9
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	6239      	str	r1, [r7, #32]
 80049ea:	415b      	adcs	r3, r3
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
 80049ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049f2:	4641      	mov	r1, r8
 80049f4:	1854      	adds	r4, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb43 0501 	adc.w	r5, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a18:	464b      	mov	r3, r9
 8004a1a:	eb45 0303 	adc.w	r3, r5, r3
 8004a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a3e:	4629      	mov	r1, r5
 8004a40:	008b      	lsls	r3, r1, #2
 8004a42:	4621      	mov	r1, r4
 8004a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a48:	4621      	mov	r1, r4
 8004a4a:	008a      	lsls	r2, r1, #2
 8004a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a50:	f7fc f93a 	bl	8000cc8 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b60      	ldr	r3, [pc, #384]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	61b9      	str	r1, [r7, #24]
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6139      	str	r1, [r7, #16]
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004adc:	4649      	mov	r1, r9
 8004ade:	008b      	lsls	r3, r1, #2
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	008a      	lsls	r2, r1, #2
 8004aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aee:	f7fc f8eb 	bl	8000cc8 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	; 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	3332      	adds	r3, #50	; 0x32
 8004b0a:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b16:	441c      	add	r4, r3
 8004b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b20:	677a      	str	r2, [r7, #116]	; 0x74
 8004b22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	1891      	adds	r1, r2, r2
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	415b      	adcs	r3, r3
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b36:	4641      	mov	r1, r8
 8004b38:	1851      	adds	r1, r2, r1
 8004b3a:	6039      	str	r1, [r7, #0]
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	414b      	adcs	r3, r1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b4e:	4659      	mov	r1, fp
 8004b50:	00cb      	lsls	r3, r1, #3
 8004b52:	4651      	mov	r1, sl
 8004b54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b58:	4651      	mov	r1, sl
 8004b5a:	00ca      	lsls	r2, r1, #3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	4642      	mov	r2, r8
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b68:	464b      	mov	r3, r9
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	4641      	mov	r1, r8
 8004b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b94:	4641      	mov	r1, r8
 8004b96:	008a      	lsls	r2, r1, #2
 8004b98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b9c:	f7fc f894 	bl	8000cc8 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2164      	movs	r1, #100	; 0x64
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	3332      	adds	r3, #50	; 0x32
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	f003 020f 	and.w	r2, r3, #15
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4422      	add	r2, r4
 8004bcc:	609a      	str	r2, [r3, #8]
}
 8004bce:	bf00      	nop
 8004bd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	51eb851f 	.word	0x51eb851f

08004be0 <arm_rfft_fast_init_f32>:
 8004be0:	084b      	lsrs	r3, r1, #1
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	b410      	push	{r4}
 8004be6:	8201      	strh	r1, [r0, #16]
 8004be8:	8003      	strh	r3, [r0, #0]
 8004bea:	d047      	beq.n	8004c7c <arm_rfft_fast_init_f32+0x9c>
 8004bec:	d917      	bls.n	8004c1e <arm_rfft_fast_init_f32+0x3e>
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf2:	d03d      	beq.n	8004c70 <arm_rfft_fast_init_f32+0x90>
 8004bf4:	d929      	bls.n	8004c4a <arm_rfft_fast_init_f32+0x6a>
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfa:	d020      	beq.n	8004c3e <arm_rfft_fast_init_f32+0x5e>
 8004bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c00:	d113      	bne.n	8004c2a <arm_rfft_fast_init_f32+0x4a>
 8004c02:	4921      	ldr	r1, [pc, #132]	; (8004c88 <arm_rfft_fast_init_f32+0xa8>)
 8004c04:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <arm_rfft_fast_init_f32+0xac>)
 8004c06:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <arm_rfft_fast_init_f32+0xb0>)
 8004c08:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004c0c:	8184      	strh	r4, [r0, #12]
 8004c0e:	6081      	str	r1, [r0, #8]
 8004c10:	6042      	str	r2, [r0, #4]
 8004c12:	6143      	str	r3, [r0, #20]
 8004c14:	2000      	movs	r0, #0
 8004c16:	b240      	sxtb	r0, r0
 8004c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d01c      	beq.n	8004c5c <arm_rfft_fast_init_f32+0x7c>
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d006      	beq.n	8004c34 <arm_rfft_fast_init_f32+0x54>
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d01d      	beq.n	8004c66 <arm_rfft_fast_init_f32+0x86>
 8004c2a:	20ff      	movs	r0, #255	; 0xff
 8004c2c:	b240      	sxtb	r0, r0
 8004c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	2438      	movs	r4, #56	; 0x38
 8004c36:	4917      	ldr	r1, [pc, #92]	; (8004c94 <arm_rfft_fast_init_f32+0xb4>)
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <arm_rfft_fast_init_f32+0xb8>)
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <arm_rfft_fast_init_f32+0xbc>)
 8004c3c:	e7e6      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c3e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004c42:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <arm_rfft_fast_init_f32+0xc0>)
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <arm_rfft_fast_init_f32+0xc4>)
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <arm_rfft_fast_init_f32+0xc8>)
 8004c48:	e7e0      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d1ec      	bne.n	8004c2a <arm_rfft_fast_init_f32+0x4a>
 8004c50:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004c54:	4915      	ldr	r1, [pc, #84]	; (8004cac <arm_rfft_fast_init_f32+0xcc>)
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <arm_rfft_fast_init_f32+0xd0>)
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <arm_rfft_fast_init_f32+0xd4>)
 8004c5a:	e7d7      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c5c:	2430      	movs	r4, #48	; 0x30
 8004c5e:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <arm_rfft_fast_init_f32+0xd8>)
 8004c60:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <arm_rfft_fast_init_f32+0xdc>)
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <arm_rfft_fast_init_f32+0xe0>)
 8004c64:	e7d2      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c66:	2414      	movs	r4, #20
 8004c68:	4916      	ldr	r1, [pc, #88]	; (8004cc4 <arm_rfft_fast_init_f32+0xe4>)
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <arm_rfft_fast_init_f32+0xe8>)
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <arm_rfft_fast_init_f32+0xec>)
 8004c6e:	e7cd      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c70:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004c74:	4916      	ldr	r1, [pc, #88]	; (8004cd0 <arm_rfft_fast_init_f32+0xf0>)
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <arm_rfft_fast_init_f32+0xf4>)
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <arm_rfft_fast_init_f32+0xf8>)
 8004c7a:	e7c7      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c7c:	24d0      	movs	r4, #208	; 0xd0
 8004c7e:	4917      	ldr	r1, [pc, #92]	; (8004cdc <arm_rfft_fast_init_f32+0xfc>)
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <arm_rfft_fast_init_f32+0x100>)
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <arm_rfft_fast_init_f32+0x104>)
 8004c84:	e7c2      	b.n	8004c0c <arm_rfft_fast_init_f32+0x2c>
 8004c86:	bf00      	nop
 8004c88:	0801621c 	.word	0x0801621c
 8004c8c:	08007414 	.word	0x08007414
 8004c90:	0800d584 	.word	0x0800d584
 8004c94:	0800b514 	.word	0x0800b514
 8004c98:	08017fdc 	.word	0x08017fdc
 8004c9c:	0801a4cc 	.word	0x0801a4cc
 8004ca0:	08013f04 	.word	0x08013f04
 8004ca4:	08011e04 	.word	0x08011e04
 8004ca8:	0800b584 	.word	0x0800b584
 8004cac:	0801a15c 	.word	0x0801a15c
 8004cb0:	08011584 	.word	0x08011584
 8004cb4:	080181dc 	.word	0x080181dc
 8004cb8:	08014dbc 	.word	0x08014dbc
 8004cbc:	08013e04 	.word	0x08013e04
 8004cc0:	0800b414 	.word	0x0800b414
 8004cc4:	08014d14 	.word	0x08014d14
 8004cc8:	08011d84 	.word	0x08011d84
 8004ccc:	08014d3c 	.word	0x08014d3c
 8004cd0:	080189dc 	.word	0x080189dc
 8004cd4:	0801521c 	.word	0x0801521c
 8004cd8:	08018d5c 	.word	0x08018d5c
 8004cdc:	0801a6cc 	.word	0x0801a6cc
 8004ce0:	08014e1c 	.word	0x08014e1c
 8004ce4:	08019d5c 	.word	0x08019d5c

08004ce8 <arm_rfft_fast_f32>:
 8004ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	8a06      	ldrh	r6, [r0, #16]
 8004cee:	0876      	lsrs	r6, r6, #1
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	8006      	strh	r6, [r0, #0]
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d15c      	bne.n	8004db6 <arm_rfft_fast_f32+0xce>
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f000 fbe6 	bl	80054d0 <arm_cfft_f32>
 8004d04:	edd4 7a00 	vldr	s15, [r4]
 8004d08:	ed94 7a01 	vldr	s14, [r4, #4]
 8004d0c:	883e      	ldrh	r6, [r7, #0]
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d18:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004d1c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004d20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d24:	3e01      	subs	r6, #1
 8004d26:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004d2a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004d2e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004d32:	ed85 7a00 	vstr	s14, [r5]
 8004d36:	edc5 7a01 	vstr	s15, [r5, #4]
 8004d3a:	3010      	adds	r0, #16
 8004d3c:	f105 0210 	add.w	r2, r5, #16
 8004d40:	3b08      	subs	r3, #8
 8004d42:	f104 0110 	add.w	r1, r4, #16
 8004d46:	ed51 4a02 	vldr	s9, [r1, #-8]
 8004d4a:	ed93 5a02 	vldr	s10, [r3, #8]
 8004d4e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004d52:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004d56:	edd3 5a03 	vldr	s11, [r3, #12]
 8004d5a:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004d5e:	ee75 7a64 	vsub.f32	s15, s10, s9
 8004d62:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004d66:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004d6a:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004d6e:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004d72:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004d76:	ee34 5a85 	vadd.f32	s10, s9, s10
 8004d7a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004d7e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004d82:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004d86:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004d8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004d8e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004d92:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004d96:	3e01      	subs	r6, #1
 8004d98:	ed42 6a02 	vstr	s13, [r2, #-8]
 8004d9c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004da0:	f1a3 0308 	sub.w	r3, r3, #8
 8004da4:	f101 0108 	add.w	r1, r1, #8
 8004da8:	f100 0008 	add.w	r0, r0, #8
 8004dac:	f102 0208 	add.w	r2, r2, #8
 8004db0:	d1c9      	bne.n	8004d46 <arm_rfft_fast_f32+0x5e>
 8004db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db6:	edd1 7a00 	vldr	s15, [r1]
 8004dba:	edd1 6a01 	vldr	s13, [r1, #4]
 8004dbe:	6941      	ldr	r1, [r0, #20]
 8004dc0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004dc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004dc8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004dcc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004dd0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004dd4:	3e01      	subs	r6, #1
 8004dd6:	ed82 7a00 	vstr	s14, [r2]
 8004dda:	edc2 7a01 	vstr	s15, [r2, #4]
 8004dde:	00f0      	lsls	r0, r6, #3
 8004de0:	b3ee      	cbz	r6, 8004e5e <arm_rfft_fast_f32+0x176>
 8004de2:	3808      	subs	r0, #8
 8004de4:	f101 0e10 	add.w	lr, r1, #16
 8004de8:	4420      	add	r0, r4
 8004dea:	f104 0110 	add.w	r1, r4, #16
 8004dee:	f102 0c10 	add.w	ip, r2, #16
 8004df2:	ed90 7a02 	vldr	s14, [r0, #8]
 8004df6:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004dfa:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004dfe:	ed90 4a03 	vldr	s8, [r0, #12]
 8004e02:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004e06:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004e0a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004e0e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004e12:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004e16:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004e1a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004e1e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004e22:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004e26:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004e2a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004e2e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004e32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e36:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004e3a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e3e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e42:	3e01      	subs	r6, #1
 8004e44:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004e48:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004e4c:	f1a0 0008 	sub.w	r0, r0, #8
 8004e50:	f101 0108 	add.w	r1, r1, #8
 8004e54:	f10e 0e08 	add.w	lr, lr, #8
 8004e58:	f10c 0c08 	add.w	ip, ip, #8
 8004e5c:	d1c9      	bne.n	8004df2 <arm_rfft_fast_f32+0x10a>
 8004e5e:	4638      	mov	r0, r7
 8004e60:	4629      	mov	r1, r5
 8004e62:	461a      	mov	r2, r3
 8004e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f000 bb31 	b.w	80054d0 <arm_cfft_f32>
 8004e6e:	bf00      	nop

08004e70 <arm_cfft_radix8by2_f32>:
 8004e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	ed2d 8b08 	vpush	{d8-d11}
 8004e78:	f8b0 e000 	ldrh.w	lr, [r0]
 8004e7c:	6842      	ldr	r2, [r0, #4]
 8004e7e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004e82:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004e86:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004e90:	f000 80af 	beq.w	8004ff2 <arm_cfft_radix8by2_f32+0x182>
 8004e94:	3310      	adds	r3, #16
 8004e96:	18ce      	adds	r6, r1, r3
 8004e98:	3210      	adds	r2, #16
 8004e9a:	4443      	add	r3, r8
 8004e9c:	f101 0510 	add.w	r5, r1, #16
 8004ea0:	f108 0410 	add.w	r4, r8, #16
 8004ea4:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004ea8:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004eac:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004eb0:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004eb4:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004eb8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004ebc:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004ec0:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004ec4:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004ec8:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004ecc:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004ed0:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004ed4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004ed8:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004edc:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004ee0:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004ee4:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004ee8:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004eec:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004ef0:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004ef4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004ef8:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004efc:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004f00:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004f04:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004f08:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004f0c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004f10:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004f14:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004f18:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004f1c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004f20:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004f24:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004f28:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004f2c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004f30:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004f34:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004f38:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004f3c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004f40:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004f44:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004f48:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004f4c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004f50:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004f54:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004f58:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004f5c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004f60:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004f64:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004f68:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004f6c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004f70:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004f74:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004f78:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f80:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004f84:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004f88:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004f8c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004f90:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004f94:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004f98:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004f9c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004fa0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004fa4:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004fa8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004fac:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004fb0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004fb4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004fb8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004fbc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004fc0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004fc4:	f1be 0e01 	subs.w	lr, lr, #1
 8004fc8:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004fcc:	f105 0510 	add.w	r5, r5, #16
 8004fd0:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004fd4:	f106 0610 	add.w	r6, r6, #16
 8004fd8:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004fdc:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004fe0:	f102 0210 	add.w	r2, r2, #16
 8004fe4:	f104 0410 	add.w	r4, r4, #16
 8004fe8:	f103 0310 	add.w	r3, r3, #16
 8004fec:	f47f af5a 	bne.w	8004ea4 <arm_cfft_radix8by2_f32+0x34>
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	fa1f f48c 	uxth.w	r4, ip
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	f000 fae2 	bl	80055c4 <arm_radix8_butterfly_f32>
 8005000:	ecbd 8b08 	vpop	{d8-d11}
 8005004:	4640      	mov	r0, r8
 8005006:	4621      	mov	r1, r4
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	2302      	movs	r3, #2
 800500c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	f000 bad8 	b.w	80055c4 <arm_radix8_butterfly_f32>

08005014 <arm_cfft_radix8by4_f32>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	ed2d 8b0a 	vpush	{d8-d12}
 800501c:	8802      	ldrh	r2, [r0, #0]
 800501e:	ed91 6a00 	vldr	s12, [r1]
 8005022:	b08f      	sub	sp, #60	; 0x3c
 8005024:	460f      	mov	r7, r1
 8005026:	0852      	lsrs	r2, r2, #1
 8005028:	0093      	lsls	r3, r2, #2
 800502a:	900c      	str	r0, [sp, #48]	; 0x30
 800502c:	9103      	str	r1, [sp, #12]
 800502e:	6841      	ldr	r1, [r0, #4]
 8005030:	ed97 7a01 	vldr	s14, [r7, #4]
 8005034:	4638      	mov	r0, r7
 8005036:	4418      	add	r0, r3
 8005038:	4606      	mov	r6, r0
 800503a:	9009      	str	r0, [sp, #36]	; 0x24
 800503c:	4418      	add	r0, r3
 800503e:	edd0 6a00 	vldr	s13, [r0]
 8005042:	edd6 3a00 	vldr	s7, [r6]
 8005046:	edd6 2a01 	vldr	s5, [r6, #4]
 800504a:	edd0 7a01 	vldr	s15, [r0, #4]
 800504e:	900a      	str	r0, [sp, #40]	; 0x28
 8005050:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005054:	4604      	mov	r4, r0
 8005056:	4625      	mov	r5, r4
 8005058:	441c      	add	r4, r3
 800505a:	ed94 4a00 	vldr	s8, [r4]
 800505e:	ed94 5a01 	vldr	s10, [r4, #4]
 8005062:	9401      	str	r4, [sp, #4]
 8005064:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005068:	4630      	mov	r0, r6
 800506a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800506e:	463e      	mov	r6, r7
 8005070:	ee14 ea90 	vmov	lr, s9
 8005074:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005078:	f846 eb08 	str.w	lr, [r6], #8
 800507c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005080:	edd0 4a01 	vldr	s9, [r0, #4]
 8005084:	9604      	str	r6, [sp, #16]
 8005086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800508a:	9e01      	ldr	r6, [sp, #4]
 800508c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005090:	ed96 2a01 	vldr	s4, [r6, #4]
 8005094:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005098:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800509c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80050a0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80050a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80050a8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80050ac:	ee73 3a45 	vsub.f32	s7, s6, s10
 80050b0:	4604      	mov	r4, r0
 80050b2:	ee36 6a45 	vsub.f32	s12, s12, s10
 80050b6:	ee75 6a26 	vadd.f32	s13, s10, s13
 80050ba:	46a3      	mov	fp, r4
 80050bc:	ee37 7a02 	vadd.f32	s14, s14, s4
 80050c0:	ee34 5a84 	vadd.f32	s10, s9, s8
 80050c4:	ee13 8a90 	vmov	r8, s7
 80050c8:	46a4      	mov	ip, r4
 80050ca:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80050ce:	ed87 7a01 	vstr	s14, [r7, #4]
 80050d2:	f84b 8b08 	str.w	r8, [fp], #8
 80050d6:	f1ac 0704 	sub.w	r7, ip, #4
 80050da:	ed8c 5a01 	vstr	s10, [ip, #4]
 80050de:	f101 0c08 	add.w	ip, r1, #8
 80050e2:	462c      	mov	r4, r5
 80050e4:	f8cd c014 	str.w	ip, [sp, #20]
 80050e8:	ee15 ca90 	vmov	ip, s11
 80050ec:	f844 cb08 	str.w	ip, [r4], #8
 80050f0:	9407      	str	r4, [sp, #28]
 80050f2:	f101 0410 	add.w	r4, r1, #16
 80050f6:	ed85 6a01 	vstr	s12, [r5, #4]
 80050fa:	0852      	lsrs	r2, r2, #1
 80050fc:	9402      	str	r4, [sp, #8]
 80050fe:	462c      	mov	r4, r5
 8005100:	f101 0518 	add.w	r5, r1, #24
 8005104:	920b      	str	r2, [sp, #44]	; 0x2c
 8005106:	46b2      	mov	sl, r6
 8005108:	9506      	str	r5, [sp, #24]
 800510a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800510e:	3a02      	subs	r2, #2
 8005110:	ee16 5a90 	vmov	r5, s13
 8005114:	46b6      	mov	lr, r6
 8005116:	4630      	mov	r0, r6
 8005118:	0852      	lsrs	r2, r2, #1
 800511a:	f84a 5b08 	str.w	r5, [sl], #8
 800511e:	f1a0 0604 	sub.w	r6, r0, #4
 8005122:	edce 7a01 	vstr	s15, [lr, #4]
 8005126:	9208      	str	r2, [sp, #32]
 8005128:	f000 8130 	beq.w	800538c <arm_cfft_radix8by4_f32+0x378>
 800512c:	4691      	mov	r9, r2
 800512e:	9a03      	ldr	r2, [sp, #12]
 8005130:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005134:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005138:	3b08      	subs	r3, #8
 800513a:	f102 0510 	add.w	r5, r2, #16
 800513e:	f101 0c20 	add.w	ip, r1, #32
 8005142:	f1a4 020c 	sub.w	r2, r4, #12
 8005146:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800514a:	4433      	add	r3, r6
 800514c:	3410      	adds	r4, #16
 800514e:	4650      	mov	r0, sl
 8005150:	4659      	mov	r1, fp
 8005152:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005156:	ed14 5a02 	vldr	s10, [r4, #-8]
 800515a:	ed91 7a00 	vldr	s14, [r1]
 800515e:	edd0 7a00 	vldr	s15, [r0]
 8005162:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005166:	ed54 5a01 	vldr	s11, [r4, #-4]
 800516a:	edd0 6a01 	vldr	s13, [r0, #4]
 800516e:	ed91 6a01 	vldr	s12, [r1, #4]
 8005172:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005176:	ee34 0a25 	vadd.f32	s0, s8, s11
 800517a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800517e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005182:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8005186:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800518a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800518e:	edd1 4a01 	vldr	s9, [r1, #4]
 8005192:	ed90 4a01 	vldr	s8, [r0, #4]
 8005196:	ee70 4a24 	vadd.f32	s9, s0, s9
 800519a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800519e:	ee74 4a84 	vadd.f32	s9, s9, s8
 80051a2:	ee35 aac7 	vsub.f32	s20, s11, s14
 80051a6:	ed45 4a01 	vstr	s9, [r5, #-4]
 80051aa:	edd6 1a00 	vldr	s3, [r6]
 80051ae:	edd7 0a00 	vldr	s1, [r7]
 80051b2:	ed92 4a02 	vldr	s8, [r2, #8]
 80051b6:	edd3 3a02 	vldr	s7, [r3, #8]
 80051ba:	ed93 2a01 	vldr	s4, [r3, #4]
 80051be:	ed16 1a01 	vldr	s2, [r6, #-4]
 80051c2:	edd2 2a01 	vldr	s5, [r2, #4]
 80051c6:	ed57 9a01 	vldr	s19, [r7, #-4]
 80051ca:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80051ce:	ee39 3a81 	vadd.f32	s6, s19, s2
 80051d2:	ee74 8a84 	vadd.f32	s17, s9, s8
 80051d6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80051da:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80051de:	ee7a aae6 	vsub.f32	s21, s21, s13
 80051e2:	ee18 aa90 	vmov	sl, s17
 80051e6:	f847 a908 	str.w	sl, [r7], #-8
 80051ea:	edd2 8a01 	vldr	s17, [r2, #4]
 80051ee:	ed93 9a01 	vldr	s18, [r3, #4]
 80051f2:	ee73 8a28 	vadd.f32	s17, s6, s17
 80051f6:	ee3a aa27 	vadd.f32	s20, s20, s15
 80051fa:	ee78 8a89 	vadd.f32	s17, s17, s18
 80051fe:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005202:	edc7 8a01 	vstr	s17, [r7, #4]
 8005206:	ed18 ba02 	vldr	s22, [r8, #-8]
 800520a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800520e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005212:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005216:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800521a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800521e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005222:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005226:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800522a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800522e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005232:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005236:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800523a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800523e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005242:	ee1c aa10 	vmov	sl, s24
 8005246:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800524a:	f841 ab08 	str.w	sl, [r1], #8
 800524e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005252:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005256:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800525a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800525e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005262:	edc2 8a01 	vstr	s17, [r2, #4]
 8005266:	ed82 ba02 	vstr	s22, [r2, #8]
 800526a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800526e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005272:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005276:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800527a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800527e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005282:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005286:	ee30 0a66 	vsub.f32	s0, s0, s13
 800528a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800528e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005292:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005296:	ee60 9a04 	vmul.f32	s19, s0, s8
 800529a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800529e:	ee20 0a24 	vmul.f32	s0, s0, s9
 80052a2:	ee63 3a84 	vmul.f32	s7, s7, s8
 80052a6:	ee39 4a68 	vsub.f32	s8, s18, s17
 80052aa:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80052ae:	ee14 aa10 	vmov	sl, s8
 80052b2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80052b6:	ee63 4a24 	vmul.f32	s9, s6, s9
 80052ba:	ed44 9a02 	vstr	s19, [r4, #-8]
 80052be:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80052c2:	ed04 0a01 	vstr	s0, [r4, #-4]
 80052c6:	f846 a908 	str.w	sl, [r6], #-8
 80052ca:	ee35 6a46 	vsub.f32	s12, s10, s12
 80052ce:	ee35 7a87 	vadd.f32	s14, s11, s14
 80052d2:	edc6 3a01 	vstr	s7, [r6, #4]
 80052d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80052da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052de:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80052e2:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80052e6:	ee67 5a86 	vmul.f32	s11, s15, s12
 80052ea:	ee26 5a87 	vmul.f32	s10, s13, s14
 80052ee:	ee72 2a62 	vsub.f32	s5, s4, s5
 80052f2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80052f6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80052fa:	ee75 5a25 	vadd.f32	s11, s10, s11
 80052fe:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005302:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800530e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005312:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005316:	ee15 aa90 	vmov	sl, s11
 800531a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800531e:	f840 ab08 	str.w	sl, [r0], #8
 8005322:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005326:	ee76 2a22 	vadd.f32	s5, s12, s5
 800532a:	f1b9 0901 	subs.w	r9, r9, #1
 800532e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005332:	f105 0508 	add.w	r5, r5, #8
 8005336:	ed83 1a02 	vstr	s2, [r3, #8]
 800533a:	edc3 2a01 	vstr	s5, [r3, #4]
 800533e:	f108 0808 	add.w	r8, r8, #8
 8005342:	f1a2 0208 	sub.w	r2, r2, #8
 8005346:	f10c 0c10 	add.w	ip, ip, #16
 800534a:	f104 0408 	add.w	r4, r4, #8
 800534e:	f10e 0e18 	add.w	lr, lr, #24
 8005352:	f1a3 0308 	sub.w	r3, r3, #8
 8005356:	f47f aefc 	bne.w	8005152 <arm_cfft_radix8by4_f32+0x13e>
 800535a:	9908      	ldr	r1, [sp, #32]
 800535c:	9802      	ldr	r0, [sp, #8]
 800535e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005362:	00cb      	lsls	r3, r1, #3
 8005364:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005368:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800536c:	9102      	str	r1, [sp, #8]
 800536e:	9904      	ldr	r1, [sp, #16]
 8005370:	4419      	add	r1, r3
 8005372:	9104      	str	r1, [sp, #16]
 8005374:	9905      	ldr	r1, [sp, #20]
 8005376:	4419      	add	r1, r3
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	9907      	ldr	r1, [sp, #28]
 800537c:	449b      	add	fp, r3
 800537e:	4419      	add	r1, r3
 8005380:	449a      	add	sl, r3
 8005382:	9b06      	ldr	r3, [sp, #24]
 8005384:	9107      	str	r1, [sp, #28]
 8005386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538a:	9306      	str	r3, [sp, #24]
 800538c:	9a04      	ldr	r2, [sp, #16]
 800538e:	9807      	ldr	r0, [sp, #28]
 8005390:	edd2 3a00 	vldr	s7, [r2]
 8005394:	ed90 4a00 	vldr	s8, [r0]
 8005398:	eddb 7a00 	vldr	s15, [fp]
 800539c:	ed9a 3a00 	vldr	s6, [sl]
 80053a0:	edd2 4a01 	vldr	s9, [r2, #4]
 80053a4:	ed90 7a01 	vldr	s14, [r0, #4]
 80053a8:	ed9b 2a01 	vldr	s4, [fp, #4]
 80053ac:	edda 5a01 	vldr	s11, [sl, #4]
 80053b0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80053b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053b6:	ee73 6a84 	vadd.f32	s13, s7, s8
 80053ba:	ee34 6a87 	vadd.f32	s12, s9, s14
 80053be:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80053c2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80053c6:	ee33 5a05 	vadd.f32	s10, s6, s10
 80053ca:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80053ce:	ed82 5a00 	vstr	s10, [r2]
 80053d2:	ed9b 5a01 	vldr	s10, [fp, #4]
 80053d6:	edda 4a01 	vldr	s9, [sl, #4]
 80053da:	ee36 5a05 	vadd.f32	s10, s12, s10
 80053de:	ee72 3a04 	vadd.f32	s7, s4, s8
 80053e2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80053e6:	ee77 4a67 	vsub.f32	s9, s14, s15
 80053ea:	ed82 5a01 	vstr	s10, [r2, #4]
 80053ee:	9a05      	ldr	r2, [sp, #20]
 80053f0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80053f4:	edd2 1a00 	vldr	s3, [r2]
 80053f8:	edd2 2a01 	vldr	s5, [r2, #4]
 80053fc:	9a02      	ldr	r2, [sp, #8]
 80053fe:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005402:	ee36 6a42 	vsub.f32	s12, s12, s4
 8005406:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800540a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800540e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005412:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005416:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800541a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800541e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005422:	edcb 2a00 	vstr	s5, [fp]
 8005426:	ed8b 5a01 	vstr	s10, [fp, #4]
 800542a:	edd2 3a01 	vldr	s7, [r2, #4]
 800542e:	ed92 5a00 	vldr	s10, [r2]
 8005432:	9a06      	ldr	r2, [sp, #24]
 8005434:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005438:	ee36 6a65 	vsub.f32	s12, s12, s11
 800543c:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005440:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005444:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005448:	ee26 6a23 	vmul.f32	s12, s12, s7
 800544c:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005450:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005454:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800545c:	edc0 6a01 	vstr	s13, [r0, #4]
 8005460:	ed80 6a00 	vstr	s12, [r0]
 8005464:	ed92 6a01 	vldr	s12, [r2, #4]
 8005468:	9803      	ldr	r0, [sp, #12]
 800546a:	ee77 7a43 	vsub.f32	s15, s14, s6
 800546e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005472:	ed92 7a00 	vldr	s14, [r2]
 8005476:	ee65 6a87 	vmul.f32	s13, s11, s14
 800547a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800547e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8005482:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005486:	ee77 5a65 	vsub.f32	s11, s14, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	edca 5a01 	vstr	s11, [sl, #4]
 8005492:	edca 7a00 	vstr	s15, [sl]
 8005496:	6872      	ldr	r2, [r6, #4]
 8005498:	4621      	mov	r1, r4
 800549a:	2304      	movs	r3, #4
 800549c:	f000 f892 	bl	80055c4 <arm_radix8_butterfly_f32>
 80054a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a2:	6872      	ldr	r2, [r6, #4]
 80054a4:	4621      	mov	r1, r4
 80054a6:	2304      	movs	r3, #4
 80054a8:	f000 f88c 	bl	80055c4 <arm_radix8_butterfly_f32>
 80054ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054ae:	6872      	ldr	r2, [r6, #4]
 80054b0:	4621      	mov	r1, r4
 80054b2:	2304      	movs	r3, #4
 80054b4:	f000 f886 	bl	80055c4 <arm_radix8_butterfly_f32>
 80054b8:	9801      	ldr	r0, [sp, #4]
 80054ba:	6872      	ldr	r2, [r6, #4]
 80054bc:	4621      	mov	r1, r4
 80054be:	2304      	movs	r3, #4
 80054c0:	b00f      	add	sp, #60	; 0x3c
 80054c2:	ecbd 8b0a 	vpop	{d8-d12}
 80054c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	f000 b87b 	b.w	80055c4 <arm_radix8_butterfly_f32>
 80054ce:	bf00      	nop

080054d0 <arm_cfft_f32>:
 80054d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	4606      	mov	r6, r0
 80054d8:	4617      	mov	r7, r2
 80054da:	460c      	mov	r4, r1
 80054dc:	4698      	mov	r8, r3
 80054de:	8805      	ldrh	r5, [r0, #0]
 80054e0:	d054      	beq.n	800558c <arm_cfft_f32+0xbc>
 80054e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80054e6:	d04c      	beq.n	8005582 <arm_cfft_f32+0xb2>
 80054e8:	d916      	bls.n	8005518 <arm_cfft_f32+0x48>
 80054ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80054ee:	d01a      	beq.n	8005526 <arm_cfft_f32+0x56>
 80054f0:	d95c      	bls.n	80055ac <arm_cfft_f32+0xdc>
 80054f2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80054f6:	d044      	beq.n	8005582 <arm_cfft_f32+0xb2>
 80054f8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80054fc:	d105      	bne.n	800550a <arm_cfft_f32+0x3a>
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	6872      	ldr	r2, [r6, #4]
 8005504:	2301      	movs	r3, #1
 8005506:	f000 f85d 	bl	80055c4 <arm_radix8_butterfly_f32>
 800550a:	f1b8 0f00 	cmp.w	r8, #0
 800550e:	d111      	bne.n	8005534 <arm_cfft_f32+0x64>
 8005510:	2f01      	cmp	r7, #1
 8005512:	d016      	beq.n	8005542 <arm_cfft_f32+0x72>
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	2d20      	cmp	r5, #32
 800551a:	d032      	beq.n	8005582 <arm_cfft_f32+0xb2>
 800551c:	d94a      	bls.n	80055b4 <arm_cfft_f32+0xe4>
 800551e:	2d40      	cmp	r5, #64	; 0x40
 8005520:	d0ed      	beq.n	80054fe <arm_cfft_f32+0x2e>
 8005522:	2d80      	cmp	r5, #128	; 0x80
 8005524:	d1f1      	bne.n	800550a <arm_cfft_f32+0x3a>
 8005526:	4630      	mov	r0, r6
 8005528:	4621      	mov	r1, r4
 800552a:	f7ff fca1 	bl	8004e70 <arm_cfft_radix8by2_f32>
 800552e:	f1b8 0f00 	cmp.w	r8, #0
 8005532:	d0ed      	beq.n	8005510 <arm_cfft_f32+0x40>
 8005534:	4620      	mov	r0, r4
 8005536:	89b1      	ldrh	r1, [r6, #12]
 8005538:	68b2      	ldr	r2, [r6, #8]
 800553a:	f7fa fe51 	bl	80001e0 <arm_bitreversal_32>
 800553e:	2f01      	cmp	r7, #1
 8005540:	d1e8      	bne.n	8005514 <arm_cfft_f32+0x44>
 8005542:	ee07 5a90 	vmov	s15, r5
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800554e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005552:	2d00      	cmp	r5, #0
 8005554:	d0de      	beq.n	8005514 <arm_cfft_f32+0x44>
 8005556:	f104 0108 	add.w	r1, r4, #8
 800555a:	2300      	movs	r3, #0
 800555c:	3301      	adds	r3, #1
 800555e:	429d      	cmp	r5, r3
 8005560:	f101 0108 	add.w	r1, r1, #8
 8005564:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005568:	ed51 7a03 	vldr	s15, [r1, #-12]
 800556c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005570:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005574:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005578:	ed41 7a03 	vstr	s15, [r1, #-12]
 800557c:	d1ee      	bne.n	800555c <arm_cfft_f32+0x8c>
 800557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005582:	4630      	mov	r0, r6
 8005584:	4621      	mov	r1, r4
 8005586:	f7ff fd45 	bl	8005014 <arm_cfft_radix8by4_f32>
 800558a:	e7be      	b.n	800550a <arm_cfft_f32+0x3a>
 800558c:	b1ad      	cbz	r5, 80055ba <arm_cfft_f32+0xea>
 800558e:	f101 030c 	add.w	r3, r1, #12
 8005592:	2200      	movs	r2, #0
 8005594:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005598:	3201      	adds	r2, #1
 800559a:	eef1 7a67 	vneg.f32	s15, s15
 800559e:	4295      	cmp	r5, r2
 80055a0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80055a4:	f103 0308 	add.w	r3, r3, #8
 80055a8:	d1f4      	bne.n	8005594 <arm_cfft_f32+0xc4>
 80055aa:	e79a      	b.n	80054e2 <arm_cfft_f32+0x12>
 80055ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80055b0:	d0a5      	beq.n	80054fe <arm_cfft_f32+0x2e>
 80055b2:	e7aa      	b.n	800550a <arm_cfft_f32+0x3a>
 80055b4:	2d10      	cmp	r5, #16
 80055b6:	d0b6      	beq.n	8005526 <arm_cfft_f32+0x56>
 80055b8:	e7a7      	b.n	800550a <arm_cfft_f32+0x3a>
 80055ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80055be:	d894      	bhi.n	80054ea <arm_cfft_f32+0x1a>
 80055c0:	e7aa      	b.n	8005518 <arm_cfft_f32+0x48>
 80055c2:	bf00      	nop

080055c4 <arm_radix8_butterfly_f32>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	ed2d 8b10 	vpush	{d8-d15}
 80055cc:	b09d      	sub	sp, #116	; 0x74
 80055ce:	461c      	mov	r4, r3
 80055d0:	ed9f bac8 	vldr	s22, [pc, #800]	; 80058f4 <arm_radix8_butterfly_f32+0x330>
 80055d4:	921a      	str	r2, [sp, #104]	; 0x68
 80055d6:	1d03      	adds	r3, r0, #4
 80055d8:	4682      	mov	sl, r0
 80055da:	4689      	mov	r9, r1
 80055dc:	468b      	mov	fp, r1
 80055de:	931b      	str	r3, [sp, #108]	; 0x6c
 80055e0:	9400      	str	r4, [sp, #0]
 80055e2:	469e      	mov	lr, r3
 80055e4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	18d6      	adds	r6, r2, r3
 80055ec:	18f5      	adds	r5, r6, r3
 80055ee:	9203      	str	r2, [sp, #12]
 80055f0:	195a      	adds	r2, r3, r5
 80055f2:	18d0      	adds	r0, r2, r3
 80055f4:	00df      	lsls	r7, r3, #3
 80055f6:	1819      	adds	r1, r3, r0
 80055f8:	463c      	mov	r4, r7
 80055fa:	9701      	str	r7, [sp, #4]
 80055fc:	4457      	add	r7, sl
 80055fe:	930c      	str	r3, [sp, #48]	; 0x30
 8005600:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800560a:	eb07 0c04 	add.w	ip, r7, r4
 800560e:	9c00      	ldr	r4, [sp, #0]
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8005616:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800561a:	3204      	adds	r2, #4
 800561c:	3104      	adds	r1, #4
 800561e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8005622:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	eddc 7a00 	vldr	s15, [ip]
 800562e:	edd7 6a00 	vldr	s13, [r7]
 8005632:	edd6 3a00 	vldr	s7, [r6]
 8005636:	ed5e aa01 	vldr	s21, [lr, #-4]
 800563a:	edd5 4a00 	vldr	s9, [r5]
 800563e:	ed90 2a00 	vldr	s4, [r0]
 8005642:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005646:	ed51 0a01 	vldr	s1, [r1, #-4]
 800564a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800564e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8005652:	ee76 1a87 	vadd.f32	s3, s13, s14
 8005656:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800565a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800565e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8005662:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005666:	ee75 6a06 	vadd.f32	s13, s10, s12
 800566a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800566e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8005672:	ed85 5a00 	vstr	s10, [r5]
 8005676:	ed96 1a01 	vldr	s2, [r6, #4]
 800567a:	edd7 5a01 	vldr	s11, [r7, #4]
 800567e:	ed92 aa00 	vldr	s20, [r2]
 8005682:	ed91 6a00 	vldr	s12, [r1]
 8005686:	ed9e 9a00 	vldr	s18, [lr]
 800568a:	ed95 5a01 	vldr	s10, [r5, #4]
 800568e:	eddc 6a01 	vldr	s13, [ip, #4]
 8005692:	edd0 9a01 	vldr	s19, [r0, #4]
 8005696:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800569a:	ee71 2a46 	vsub.f32	s5, s2, s12
 800569e:	ee75 3aca 	vsub.f32	s7, s11, s20
 80056a2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80056a6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80056aa:	ee37 7a20 	vadd.f32	s14, s14, s1
 80056ae:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80056b2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80056b6:	ee79 3a05 	vadd.f32	s7, s18, s10
 80056ba:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80056be:	ee39 5a45 	vsub.f32	s10, s18, s10
 80056c2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80056c6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80056ca:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80056ce:	ee31 6a06 	vadd.f32	s12, s2, s12
 80056d2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80056d6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80056da:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80056de:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80056e2:	ee33 3a68 	vsub.f32	s6, s6, s17
 80056e6:	ee36 0a88 	vadd.f32	s0, s13, s16
 80056ea:	ee75 8a86 	vadd.f32	s17, s11, s12
 80056ee:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80056f2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80056f6:	ee75 6a62 	vsub.f32	s13, s10, s5
 80056fa:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80056fe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005702:	ee33 1a89 	vadd.f32	s2, s7, s18
 8005706:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800570a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800570e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8005712:	ee32 5a27 	vadd.f32	s10, s4, s15
 8005716:	ee72 7a67 	vsub.f32	s15, s4, s15
 800571a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800571e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8005722:	ee31 9a28 	vadd.f32	s18, s2, s17
 8005726:	ee33 6a46 	vsub.f32	s12, s6, s12
 800572a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800572e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8005732:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005736:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800573a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800573e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8005742:	ee34 4a21 	vadd.f32	s8, s8, s3
 8005746:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800574a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800574e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005752:	44d8      	add	r8, fp
 8005754:	45c1      	cmp	r9, r8
 8005756:	ed8e 9a00 	vstr	s18, [lr]
 800575a:	ed85 1a01 	vstr	s2, [r5, #4]
 800575e:	449e      	add	lr, r3
 8005760:	ed8c 8a00 	vstr	s16, [ip]
 8005764:	441d      	add	r5, r3
 8005766:	ed80 6a00 	vstr	s12, [r0]
 800576a:	edcc 0a01 	vstr	s1, [ip, #4]
 800576e:	ed80 4a01 	vstr	s8, [r0, #4]
 8005772:	449c      	add	ip, r3
 8005774:	ed87 2a00 	vstr	s4, [r7]
 8005778:	4418      	add	r0, r3
 800577a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800577e:	ed42 2a01 	vstr	s5, [r2, #-4]
 8005782:	ed86 7a00 	vstr	s14, [r6]
 8005786:	ed87 3a01 	vstr	s6, [r7, #4]
 800578a:	edc1 4a00 	vstr	s9, [r1]
 800578e:	441f      	add	r7, r3
 8005790:	edc2 5a00 	vstr	s11, [r2]
 8005794:	4419      	add	r1, r3
 8005796:	edc6 6a01 	vstr	s13, [r6, #4]
 800579a:	441a      	add	r2, r3
 800579c:	441e      	add	r6, r3
 800579e:	f63f af44 	bhi.w	800562a <arm_radix8_butterfly_f32+0x66>
 80057a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057a4:	2907      	cmp	r1, #7
 80057a6:	4620      	mov	r0, r4
 80057a8:	f240 81e9 	bls.w	8005b7e <arm_radix8_butterfly_f32+0x5ba>
 80057ac:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80057b0:	193e      	adds	r6, r7, r4
 80057b2:	1935      	adds	r5, r6, r4
 80057b4:	9c03      	ldr	r4, [sp, #12]
 80057b6:	9000      	str	r0, [sp, #0]
 80057b8:	4622      	mov	r2, r4
 80057ba:	3201      	adds	r2, #1
 80057bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80057c0:	9900      	ldr	r1, [sp, #0]
 80057c2:	1828      	adds	r0, r5, r0
 80057c4:	eb00 0e01 	add.w	lr, r0, r1
 80057c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057ca:	440a      	add	r2, r1
 80057cc:	eb04 0c01 	add.w	ip, r4, r1
 80057d0:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80057d4:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80057d8:	9a00      	ldr	r2, [sp, #0]
 80057da:	940f      	str	r4, [sp, #60]	; 0x3c
 80057dc:	00ed      	lsls	r5, r5, #3
 80057de:	9511      	str	r5, [sp, #68]	; 0x44
 80057e0:	00d5      	lsls	r5, r2, #3
 80057e2:	950d      	str	r5, [sp, #52]	; 0x34
 80057e4:	9d01      	ldr	r5, [sp, #4]
 80057e6:	3508      	adds	r5, #8
 80057e8:	9516      	str	r5, [sp, #88]	; 0x58
 80057ea:	9d02      	ldr	r5, [sp, #8]
 80057ec:	3508      	adds	r5, #8
 80057ee:	0114      	lsls	r4, r2, #4
 80057f0:	9517      	str	r5, [sp, #92]	; 0x5c
 80057f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80057f6:	940e      	str	r4, [sp, #56]	; 0x38
 80057f8:	00c0      	lsls	r0, r0, #3
 80057fa:	9010      	str	r0, [sp, #64]	; 0x40
 80057fc:	18aa      	adds	r2, r5, r2
 80057fe:	9207      	str	r2, [sp, #28]
 8005800:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005802:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005804:	18aa      	adds	r2, r5, r2
 8005806:	9208      	str	r2, [sp, #32]
 8005808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800580a:	18aa      	adds	r2, r5, r2
 800580c:	9209      	str	r2, [sp, #36]	; 0x24
 800580e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005812:	f10e 0204 	add.w	r2, lr, #4
 8005816:	920a      	str	r2, [sp, #40]	; 0x28
 8005818:	00c9      	lsls	r1, r1, #3
 800581a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800581c:	310c      	adds	r1, #12
 800581e:	00f6      	lsls	r6, r6, #3
 8005820:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8005824:	9114      	str	r1, [sp, #80]	; 0x50
 8005826:	18a9      	adds	r1, r5, r2
 8005828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800582a:	9612      	str	r6, [sp, #72]	; 0x48
 800582c:	00ff      	lsls	r7, r7, #3
 800582e:	19ae      	adds	r6, r5, r6
 8005830:	3008      	adds	r0, #8
 8005832:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005836:	9606      	str	r6, [sp, #24]
 8005838:	9019      	str	r0, [sp, #100]	; 0x64
 800583a:	18aa      	adds	r2, r5, r2
 800583c:	0164      	lsls	r4, r4, #5
 800583e:	19ee      	adds	r6, r5, r7
 8005840:	f10c 000c 	add.w	r0, ip, #12
 8005844:	9713      	str	r7, [sp, #76]	; 0x4c
 8005846:	9604      	str	r6, [sp, #16]
 8005848:	9015      	str	r0, [sp, #84]	; 0x54
 800584a:	9103      	str	r1, [sp, #12]
 800584c:	9205      	str	r2, [sp, #20]
 800584e:	f104 0208 	add.w	r2, r4, #8
 8005852:	9218      	str	r2, [sp, #96]	; 0x60
 8005854:	f04f 0801 	mov.w	r8, #1
 8005858:	2200      	movs	r2, #0
 800585a:	f102 0108 	add.w	r1, r2, #8
 800585e:	460f      	mov	r7, r1
 8005860:	910b      	str	r1, [sp, #44]	; 0x2c
 8005862:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005864:	188e      	adds	r6, r1, r2
 8005866:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005868:	188d      	adds	r5, r1, r2
 800586a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800586c:	188c      	adds	r4, r1, r2
 800586e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005870:	1888      	adds	r0, r1, r2
 8005872:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005874:	eb01 0c02 	add.w	ip, r1, r2
 8005878:	9915      	ldr	r1, [sp, #84]	; 0x54
 800587a:	440a      	add	r2, r1
 800587c:	9903      	ldr	r1, [sp, #12]
 800587e:	edd1 fa00 	vldr	s31, [r1]
 8005882:	9905      	ldr	r1, [sp, #20]
 8005884:	ed91 fa00 	vldr	s30, [r1]
 8005888:	9904      	ldr	r1, [sp, #16]
 800588a:	edd1 ea00 	vldr	s29, [r1]
 800588e:	9906      	ldr	r1, [sp, #24]
 8005890:	ed91 ea00 	vldr	s28, [r1]
 8005894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005896:	edd1 da00 	vldr	s27, [r1]
 800589a:	9908      	ldr	r1, [sp, #32]
 800589c:	ed91 da00 	vldr	s26, [r1]
 80058a0:	9907      	ldr	r1, [sp, #28]
 80058a2:	edd1 ca00 	vldr	s25, [r1]
 80058a6:	9903      	ldr	r1, [sp, #12]
 80058a8:	ed91 ca01 	vldr	s24, [r1, #4]
 80058ac:	9905      	ldr	r1, [sp, #20]
 80058ae:	edd1 ba01 	vldr	s23, [r1, #4]
 80058b2:	9904      	ldr	r1, [sp, #16]
 80058b4:	edd1 aa01 	vldr	s21, [r1, #4]
 80058b8:	9906      	ldr	r1, [sp, #24]
 80058ba:	ed91 aa01 	vldr	s20, [r1, #4]
 80058be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c0:	edd1 7a01 	vldr	s15, [r1, #4]
 80058c4:	9908      	ldr	r1, [sp, #32]
 80058c6:	edcd 7a00 	vstr	s15, [sp]
 80058ca:	edd1 7a01 	vldr	s15, [r1, #4]
 80058ce:	9907      	ldr	r1, [sp, #28]
 80058d0:	edcd 7a01 	vstr	s15, [sp, #4]
 80058d4:	edd1 7a01 	vldr	s15, [r1, #4]
 80058d8:	eb0a 0e07 	add.w	lr, sl, r7
 80058dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80058de:	edcd 7a02 	vstr	s15, [sp, #8]
 80058e2:	eb0c 010a 	add.w	r1, ip, sl
 80058e6:	4456      	add	r6, sl
 80058e8:	4455      	add	r5, sl
 80058ea:	4454      	add	r4, sl
 80058ec:	4450      	add	r0, sl
 80058ee:	4452      	add	r2, sl
 80058f0:	46c4      	mov	ip, r8
 80058f2:	e001      	b.n	80058f8 <arm_radix8_butterfly_f32+0x334>
 80058f4:	3f3504f3 	.word	0x3f3504f3
 80058f8:	ed96 5a00 	vldr	s10, [r6]
 80058fc:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005900:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005904:	edd0 7a00 	vldr	s15, [r0]
 8005908:	ed17 7a01 	vldr	s14, [r7, #-4]
 800590c:	edde 3a00 	vldr	s7, [lr]
 8005910:	ed94 3a00 	vldr	s6, [r4]
 8005914:	ed95 2a00 	vldr	s4, [r5]
 8005918:	ed9e 0a01 	vldr	s0, [lr, #4]
 800591c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005920:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005924:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005928:	ee77 4a87 	vadd.f32	s9, s15, s14
 800592c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005930:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005934:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005938:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800593c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005940:	ed8e 6a00 	vstr	s12, [lr]
 8005944:	edd0 8a01 	vldr	s17, [r0, #4]
 8005948:	ed95 9a01 	vldr	s18, [r5, #4]
 800594c:	edd1 2a00 	vldr	s5, [r1]
 8005950:	ed97 7a00 	vldr	s14, [r7]
 8005954:	edd4 0a01 	vldr	s1, [r4, #4]
 8005958:	ed96 6a01 	vldr	s12, [r6, #4]
 800595c:	edd2 5a00 	vldr	s11, [r2]
 8005960:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005964:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005968:	ee39 5a62 	vsub.f32	s10, s18, s5
 800596c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005970:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005974:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005978:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800597c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005980:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005984:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005988:	ee35 5a29 	vadd.f32	s10, s10, s19
 800598c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005990:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005994:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005998:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800599c:	ee32 9a08 	vadd.f32	s18, s4, s16
 80059a0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80059a4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80059a8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80059ac:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80059b0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80059b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80059b8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80059bc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80059c0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80059c4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80059c8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80059cc:	ee32 7a64 	vsub.f32	s14, s4, s9
 80059d0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80059d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80059d8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80059dc:	ee75 8a85 	vadd.f32	s17, s11, s10
 80059e0:	ee74 3a22 	vadd.f32	s7, s8, s5
 80059e4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80059e8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80059ec:	ee79 1a41 	vsub.f32	s3, s18, s2
 80059f0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80059f4:	ee76 5a43 	vsub.f32	s11, s12, s6
 80059f8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80059fc:	ee72 4a24 	vadd.f32	s9, s4, s9
 8005a00:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005a04:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005a08:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005a0c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005a10:	ee36 6a03 	vadd.f32	s12, s12, s6
 8005a14:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005a18:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005a1c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005a20:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005a24:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005a28:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005a2c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005a30:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005a34:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005a38:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005a3c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005a40:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005a44:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005a48:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005a4c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005a50:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005a54:	ed8e 1a01 	vstr	s2, [lr, #4]
 8005a58:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005a5c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005a60:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005a64:	ed86 3a00 	vstr	s6, [r6]
 8005a68:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005a6c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005a70:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005a74:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005a78:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005a7c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005a80:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005a84:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005a88:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005a8c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005a90:	ed9d 4a00 	vldr	s8, [sp]
 8005a94:	edc6 6a01 	vstr	s13, [r6, #4]
 8005a98:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005a9c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005aa0:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005aa4:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005aa8:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005aac:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ab0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005ab4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005ab8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005abc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005ac0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005ac4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005ac8:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005acc:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005ad0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005ad4:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005ad8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005adc:	44dc      	add	ip, fp
 8005ade:	45e1      	cmp	r9, ip
 8005ae0:	ed84 9a00 	vstr	s18, [r4]
 8005ae4:	edc4 3a01 	vstr	s7, [r4, #4]
 8005ae8:	449e      	add	lr, r3
 8005aea:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005aee:	edc2 2a00 	vstr	s5, [r2]
 8005af2:	441e      	add	r6, r3
 8005af4:	ed85 2a00 	vstr	s4, [r5]
 8005af8:	ed85 8a01 	vstr	s16, [r5, #4]
 8005afc:	441c      	add	r4, r3
 8005afe:	ed47 1a01 	vstr	s3, [r7, #-4]
 8005b02:	ed87 0a00 	vstr	s0, [r7]
 8005b06:	441a      	add	r2, r3
 8005b08:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005b0c:	edc1 9a00 	vstr	s19, [r1]
 8005b10:	441d      	add	r5, r3
 8005b12:	edc0 0a00 	vstr	s1, [r0]
 8005b16:	441f      	add	r7, r3
 8005b18:	ed80 6a01 	vstr	s12, [r0, #4]
 8005b1c:	4419      	add	r1, r3
 8005b1e:	4418      	add	r0, r3
 8005b20:	f63f aeea 	bhi.w	80058f8 <arm_radix8_butterfly_f32+0x334>
 8005b24:	9a03      	ldr	r2, [sp, #12]
 8005b26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b28:	440a      	add	r2, r1
 8005b2a:	9203      	str	r2, [sp, #12]
 8005b2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b2e:	9a05      	ldr	r2, [sp, #20]
 8005b30:	440a      	add	r2, r1
 8005b32:	9205      	str	r2, [sp, #20]
 8005b34:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	440a      	add	r2, r1
 8005b3a:	9204      	str	r2, [sp, #16]
 8005b3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b3e:	9a06      	ldr	r2, [sp, #24]
 8005b40:	440a      	add	r2, r1
 8005b42:	9206      	str	r2, [sp, #24]
 8005b44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b48:	440a      	add	r2, r1
 8005b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b4e:	9a08      	ldr	r2, [sp, #32]
 8005b50:	440a      	add	r2, r1
 8005b52:	9208      	str	r2, [sp, #32]
 8005b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	440a      	add	r2, r1
 8005b5a:	9207      	str	r2, [sp, #28]
 8005b5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b60:	f108 0801 	add.w	r8, r8, #1
 8005b64:	3208      	adds	r2, #8
 8005b66:	4588      	cmp	r8, r1
 8005b68:	920a      	str	r2, [sp, #40]	; 0x28
 8005b6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b6c:	f47f ae75 	bne.w	800585a <arm_radix8_butterfly_f32+0x296>
 8005b70:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	46c3      	mov	fp, r8
 8005b78:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8005b7c:	e532      	b.n	80055e4 <arm_radix8_butterfly_f32+0x20>
 8005b7e:	b01d      	add	sp, #116	; 0x74
 8005b80:	ecbd 8b10 	vpop	{d8-d15}
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b88 <__errno>:
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <__errno+0x8>)
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000010 	.word	0x20000010

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4d0d      	ldr	r5, [pc, #52]	; (8005bcc <__libc_init_array+0x38>)
 8005b98:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <__libc_init_array+0x3c>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	42a6      	cmp	r6, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	4d0b      	ldr	r5, [pc, #44]	; (8005bd4 <__libc_init_array+0x40>)
 8005ba6:	4c0c      	ldr	r4, [pc, #48]	; (8005bd8 <__libc_init_array+0x44>)
 8005ba8:	f001 fbcc 	bl	8007344 <_init>
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbc:	4798      	blx	r3
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc6:	4798      	blx	r3
 8005bc8:	3601      	adds	r6, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	0801a8d8 	.word	0x0801a8d8
 8005bd0:	0801a8d8 	.word	0x0801a8d8
 8005bd4:	0801a8d8 	.word	0x0801a8d8
 8005bd8:	0801a8dc 	.word	0x0801a8dc

08005bdc <memset>:
 8005bdc:	4402      	add	r2, r0
 8005bde:	4603      	mov	r3, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <siprintf>:
 8005bec:	b40e      	push	{r1, r2, r3}
 8005bee:	b500      	push	{lr}
 8005bf0:	b09c      	sub	sp, #112	; 0x70
 8005bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8005bf4:	9002      	str	r0, [sp, #8]
 8005bf6:	9006      	str	r0, [sp, #24]
 8005bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bfc:	4809      	ldr	r0, [pc, #36]	; (8005c24 <siprintf+0x38>)
 8005bfe:	9107      	str	r1, [sp, #28]
 8005c00:	9104      	str	r1, [sp, #16]
 8005c02:	4909      	ldr	r1, [pc, #36]	; (8005c28 <siprintf+0x3c>)
 8005c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c08:	9105      	str	r1, [sp, #20]
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	a902      	add	r1, sp, #8
 8005c10:	f000 f868 	bl	8005ce4 <_svfiprintf_r>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	b01c      	add	sp, #112	; 0x70
 8005c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c20:	b003      	add	sp, #12
 8005c22:	4770      	bx	lr
 8005c24:	20000010 	.word	0x20000010
 8005c28:	ffff0208 	.word	0xffff0208

08005c2c <__ssputs_r>:
 8005c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	688e      	ldr	r6, [r1, #8]
 8005c32:	429e      	cmp	r6, r3
 8005c34:	4682      	mov	sl, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4690      	mov	r8, r2
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	d838      	bhi.n	8005cb0 <__ssputs_r+0x84>
 8005c3e:	898a      	ldrh	r2, [r1, #12]
 8005c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c44:	d032      	beq.n	8005cac <__ssputs_r+0x80>
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	6909      	ldr	r1, [r1, #16]
 8005c4a:	eba5 0901 	sub.w	r9, r5, r1
 8005c4e:	6965      	ldr	r5, [r4, #20]
 8005c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c58:	3301      	adds	r3, #1
 8005c5a:	444b      	add	r3, r9
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	429d      	cmp	r5, r3
 8005c60:	bf38      	it	cc
 8005c62:	461d      	movcc	r5, r3
 8005c64:	0553      	lsls	r3, r2, #21
 8005c66:	d531      	bpl.n	8005ccc <__ssputs_r+0xa0>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f000 fb63 	bl	8006334 <_malloc_r>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	b950      	cbnz	r0, 8005c88 <__ssputs_r+0x5c>
 8005c72:	230c      	movs	r3, #12
 8005c74:	f8ca 3000 	str.w	r3, [sl]
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	6921      	ldr	r1, [r4, #16]
 8005c8a:	464a      	mov	r2, r9
 8005c8c:	f000 fabe 	bl	800620c <memcpy>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	6126      	str	r6, [r4, #16]
 8005c9e:	6165      	str	r5, [r4, #20]
 8005ca0:	444e      	add	r6, r9
 8005ca2:	eba5 0509 	sub.w	r5, r5, r9
 8005ca6:	6026      	str	r6, [r4, #0]
 8005ca8:	60a5      	str	r5, [r4, #8]
 8005caa:	463e      	mov	r6, r7
 8005cac:	42be      	cmp	r6, r7
 8005cae:	d900      	bls.n	8005cb2 <__ssputs_r+0x86>
 8005cb0:	463e      	mov	r6, r7
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	f000 fab6 	bl	8006228 <memmove>
 8005cbc:	68a3      	ldr	r3, [r4, #8]
 8005cbe:	1b9b      	subs	r3, r3, r6
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	4433      	add	r3, r6
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7db      	b.n	8005c84 <__ssputs_r+0x58>
 8005ccc:	462a      	mov	r2, r5
 8005cce:	f000 fba5 	bl	800641c <_realloc_r>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d1e1      	bne.n	8005c9c <__ssputs_r+0x70>
 8005cd8:	6921      	ldr	r1, [r4, #16]
 8005cda:	4650      	mov	r0, sl
 8005cdc:	f000 fabe 	bl	800625c <_free_r>
 8005ce0:	e7c7      	b.n	8005c72 <__ssputs_r+0x46>
	...

08005ce4 <_svfiprintf_r>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	4698      	mov	r8, r3
 8005cea:	898b      	ldrh	r3, [r1, #12]
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	b09d      	sub	sp, #116	; 0x74
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	d50e      	bpl.n	8005d16 <_svfiprintf_r+0x32>
 8005cf8:	690b      	ldr	r3, [r1, #16]
 8005cfa:	b963      	cbnz	r3, 8005d16 <_svfiprintf_r+0x32>
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	f000 fb19 	bl	8006334 <_malloc_r>
 8005d02:	6028      	str	r0, [r5, #0]
 8005d04:	6128      	str	r0, [r5, #16]
 8005d06:	b920      	cbnz	r0, 8005d12 <_svfiprintf_r+0x2e>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	e0d1      	b.n	8005eb6 <_svfiprintf_r+0x1d2>
 8005d12:	2340      	movs	r3, #64	; 0x40
 8005d14:	616b      	str	r3, [r5, #20]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d24:	2330      	movs	r3, #48	; 0x30
 8005d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ed0 <_svfiprintf_r+0x1ec>
 8005d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	4623      	mov	r3, r4
 8005d34:	469a      	mov	sl, r3
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	b10a      	cbz	r2, 8005d40 <_svfiprintf_r+0x5c>
 8005d3c:	2a25      	cmp	r2, #37	; 0x25
 8005d3e:	d1f9      	bne.n	8005d34 <_svfiprintf_r+0x50>
 8005d40:	ebba 0b04 	subs.w	fp, sl, r4
 8005d44:	d00b      	beq.n	8005d5e <_svfiprintf_r+0x7a>
 8005d46:	465b      	mov	r3, fp
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff6d 	bl	8005c2c <__ssputs_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	f000 80aa 	beq.w	8005eac <_svfiprintf_r+0x1c8>
 8005d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5a:	445a      	add	r2, fp
 8005d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80a2 	beq.w	8005eac <_svfiprintf_r+0x1c8>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d72:	f10a 0a01 	add.w	sl, sl, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9307      	str	r3, [sp, #28]
 8005d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005d80:	4654      	mov	r4, sl
 8005d82:	2205      	movs	r2, #5
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	4851      	ldr	r0, [pc, #324]	; (8005ed0 <_svfiprintf_r+0x1ec>)
 8005d8a:	f7fa fa91 	bl	80002b0 <memchr>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	b9d8      	cbnz	r0, 8005dca <_svfiprintf_r+0xe6>
 8005d92:	06d0      	lsls	r0, r2, #27
 8005d94:	bf44      	itt	mi
 8005d96:	2320      	movmi	r3, #32
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d9c:	0711      	lsls	r1, r2, #28
 8005d9e:	bf44      	itt	mi
 8005da0:	232b      	movmi	r3, #43	; 0x2b
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da6:	f89a 3000 	ldrb.w	r3, [sl]
 8005daa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dac:	d015      	beq.n	8005dda <_svfiprintf_r+0xf6>
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	4654      	mov	r4, sl
 8005db2:	2000      	movs	r0, #0
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	4621      	mov	r1, r4
 8005dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbe:	3b30      	subs	r3, #48	; 0x30
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d94e      	bls.n	8005e62 <_svfiprintf_r+0x17e>
 8005dc4:	b1b0      	cbz	r0, 8005df4 <_svfiprintf_r+0x110>
 8005dc6:	9207      	str	r2, [sp, #28]
 8005dc8:	e014      	b.n	8005df4 <_svfiprintf_r+0x110>
 8005dca:	eba0 0308 	sub.w	r3, r0, r8
 8005dce:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	e7d2      	b.n	8005d80 <_svfiprintf_r+0x9c>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbb      	ittet	lt
 8005de6:	425b      	neglt	r3, r3
 8005de8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dec:	9307      	strge	r3, [sp, #28]
 8005dee:	9307      	strlt	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	9204      	strlt	r2, [sp, #16]
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b2e      	cmp	r3, #46	; 0x2e
 8005df8:	d10c      	bne.n	8005e14 <_svfiprintf_r+0x130>
 8005dfa:	7863      	ldrb	r3, [r4, #1]
 8005dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfe:	d135      	bne.n	8005e6c <_svfiprintf_r+0x188>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bfb8      	it	lt
 8005e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e10:	3402      	adds	r4, #2
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ee0 <_svfiprintf_r+0x1fc>
 8005e18:	7821      	ldrb	r1, [r4, #0]
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	f7fa fa47 	bl	80002b0 <memchr>
 8005e22:	b140      	cbz	r0, 8005e36 <_svfiprintf_r+0x152>
 8005e24:	2340      	movs	r3, #64	; 0x40
 8005e26:	eba0 000a 	sub.w	r0, r0, sl
 8005e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e2e:	9b04      	ldr	r3, [sp, #16]
 8005e30:	4303      	orrs	r3, r0
 8005e32:	3401      	adds	r4, #1
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3a:	4826      	ldr	r0, [pc, #152]	; (8005ed4 <_svfiprintf_r+0x1f0>)
 8005e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e40:	2206      	movs	r2, #6
 8005e42:	f7fa fa35 	bl	80002b0 <memchr>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d038      	beq.n	8005ebc <_svfiprintf_r+0x1d8>
 8005e4a:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <_svfiprintf_r+0x1f4>)
 8005e4c:	bb1b      	cbnz	r3, 8005e96 <_svfiprintf_r+0x1b2>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	3307      	adds	r3, #7
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	3308      	adds	r3, #8
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5c:	4433      	add	r3, r6
 8005e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e60:	e767      	b.n	8005d32 <_svfiprintf_r+0x4e>
 8005e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e66:	460c      	mov	r4, r1
 8005e68:	2001      	movs	r0, #1
 8005e6a:	e7a5      	b.n	8005db8 <_svfiprintf_r+0xd4>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	3401      	adds	r4, #1
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	4619      	mov	r1, r3
 8005e74:	f04f 0c0a 	mov.w	ip, #10
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e7e:	3a30      	subs	r2, #48	; 0x30
 8005e80:	2a09      	cmp	r2, #9
 8005e82:	d903      	bls.n	8005e8c <_svfiprintf_r+0x1a8>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0c5      	beq.n	8005e14 <_svfiprintf_r+0x130>
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	e7c3      	b.n	8005e14 <_svfiprintf_r+0x130>
 8005e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e90:	4604      	mov	r4, r0
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7f0      	b.n	8005e78 <_svfiprintf_r+0x194>
 8005e96:	ab03      	add	r3, sp, #12
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	462a      	mov	r2, r5
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <_svfiprintf_r+0x1f8>)
 8005e9e:	a904      	add	r1, sp, #16
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f3af 8000 	nop.w
 8005ea6:	1c42      	adds	r2, r0, #1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	d1d6      	bne.n	8005e5a <_svfiprintf_r+0x176>
 8005eac:	89ab      	ldrh	r3, [r5, #12]
 8005eae:	065b      	lsls	r3, r3, #25
 8005eb0:	f53f af2c 	bmi.w	8005d0c <_svfiprintf_r+0x28>
 8005eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eb6:	b01d      	add	sp, #116	; 0x74
 8005eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebc:	ab03      	add	r3, sp, #12
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <_svfiprintf_r+0x1f8>)
 8005ec4:	a904      	add	r1, sp, #16
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f000 f87a 	bl	8005fc0 <_printf_i>
 8005ecc:	e7eb      	b.n	8005ea6 <_svfiprintf_r+0x1c2>
 8005ece:	bf00      	nop
 8005ed0:	0801a86c 	.word	0x0801a86c
 8005ed4:	0801a876 	.word	0x0801a876
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	08005c2d 	.word	0x08005c2d
 8005ee0:	0801a872 	.word	0x0801a872

08005ee4 <_printf_common>:
 8005ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	4616      	mov	r6, r2
 8005eea:	4699      	mov	r9, r3
 8005eec:	688a      	ldr	r2, [r1, #8]
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bfb8      	it	lt
 8005ef8:	4613      	movlt	r3, r2
 8005efa:	6033      	str	r3, [r6, #0]
 8005efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f00:	4607      	mov	r7, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	b10a      	cbz	r2, 8005f0a <_printf_common+0x26>
 8005f06:	3301      	adds	r3, #1
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	0699      	lsls	r1, r3, #26
 8005f0e:	bf42      	ittt	mi
 8005f10:	6833      	ldrmi	r3, [r6, #0]
 8005f12:	3302      	addmi	r3, #2
 8005f14:	6033      	strmi	r3, [r6, #0]
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	f015 0506 	ands.w	r5, r5, #6
 8005f1c:	d106      	bne.n	8005f2c <_printf_common+0x48>
 8005f1e:	f104 0a19 	add.w	sl, r4, #25
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	6832      	ldr	r2, [r6, #0]
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	42ab      	cmp	r3, r5
 8005f2a:	dc26      	bgt.n	8005f7a <_printf_common+0x96>
 8005f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f30:	1e13      	subs	r3, r2, #0
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	bf18      	it	ne
 8005f36:	2301      	movne	r3, #1
 8005f38:	0692      	lsls	r2, r2, #26
 8005f3a:	d42b      	bmi.n	8005f94 <_printf_common+0xb0>
 8005f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f40:	4649      	mov	r1, r9
 8005f42:	4638      	mov	r0, r7
 8005f44:	47c0      	blx	r8
 8005f46:	3001      	adds	r0, #1
 8005f48:	d01e      	beq.n	8005f88 <_printf_common+0xa4>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	68e5      	ldr	r5, [r4, #12]
 8005f4e:	6832      	ldr	r2, [r6, #0]
 8005f50:	f003 0306 	and.w	r3, r3, #6
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	bf08      	it	eq
 8005f58:	1aad      	subeq	r5, r5, r2
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	6922      	ldr	r2, [r4, #16]
 8005f5e:	bf0c      	ite	eq
 8005f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f64:	2500      	movne	r5, #0
 8005f66:	4293      	cmp	r3, r2
 8005f68:	bfc4      	itt	gt
 8005f6a:	1a9b      	subgt	r3, r3, r2
 8005f6c:	18ed      	addgt	r5, r5, r3
 8005f6e:	2600      	movs	r6, #0
 8005f70:	341a      	adds	r4, #26
 8005f72:	42b5      	cmp	r5, r6
 8005f74:	d11a      	bne.n	8005fac <_printf_common+0xc8>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e008      	b.n	8005f8c <_printf_common+0xa8>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4652      	mov	r2, sl
 8005f7e:	4649      	mov	r1, r9
 8005f80:	4638      	mov	r0, r7
 8005f82:	47c0      	blx	r8
 8005f84:	3001      	adds	r0, #1
 8005f86:	d103      	bne.n	8005f90 <_printf_common+0xac>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	3501      	adds	r5, #1
 8005f92:	e7c6      	b.n	8005f22 <_printf_common+0x3e>
 8005f94:	18e1      	adds	r1, r4, r3
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	2030      	movs	r0, #48	; 0x30
 8005f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f9e:	4422      	add	r2, r4
 8005fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa8:	3302      	adds	r3, #2
 8005faa:	e7c7      	b.n	8005f3c <_printf_common+0x58>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4622      	mov	r2, r4
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	47c0      	blx	r8
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d0e6      	beq.n	8005f88 <_printf_common+0xa4>
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7d9      	b.n	8005f72 <_printf_common+0x8e>
	...

08005fc0 <_printf_i>:
 8005fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	7e0f      	ldrb	r7, [r1, #24]
 8005fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fc8:	2f78      	cmp	r7, #120	; 0x78
 8005fca:	4691      	mov	r9, r2
 8005fcc:	4680      	mov	r8, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	469a      	mov	sl, r3
 8005fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fd6:	d807      	bhi.n	8005fe8 <_printf_i+0x28>
 8005fd8:	2f62      	cmp	r7, #98	; 0x62
 8005fda:	d80a      	bhi.n	8005ff2 <_printf_i+0x32>
 8005fdc:	2f00      	cmp	r7, #0
 8005fde:	f000 80d8 	beq.w	8006192 <_printf_i+0x1d2>
 8005fe2:	2f58      	cmp	r7, #88	; 0x58
 8005fe4:	f000 80a3 	beq.w	800612e <_printf_i+0x16e>
 8005fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff0:	e03a      	b.n	8006068 <_printf_i+0xa8>
 8005ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ff6:	2b15      	cmp	r3, #21
 8005ff8:	d8f6      	bhi.n	8005fe8 <_printf_i+0x28>
 8005ffa:	a101      	add	r1, pc, #4	; (adr r1, 8006000 <_printf_i+0x40>)
 8005ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006000:	08006059 	.word	0x08006059
 8006004:	0800606d 	.word	0x0800606d
 8006008:	08005fe9 	.word	0x08005fe9
 800600c:	08005fe9 	.word	0x08005fe9
 8006010:	08005fe9 	.word	0x08005fe9
 8006014:	08005fe9 	.word	0x08005fe9
 8006018:	0800606d 	.word	0x0800606d
 800601c:	08005fe9 	.word	0x08005fe9
 8006020:	08005fe9 	.word	0x08005fe9
 8006024:	08005fe9 	.word	0x08005fe9
 8006028:	08005fe9 	.word	0x08005fe9
 800602c:	08006179 	.word	0x08006179
 8006030:	0800609d 	.word	0x0800609d
 8006034:	0800615b 	.word	0x0800615b
 8006038:	08005fe9 	.word	0x08005fe9
 800603c:	08005fe9 	.word	0x08005fe9
 8006040:	0800619b 	.word	0x0800619b
 8006044:	08005fe9 	.word	0x08005fe9
 8006048:	0800609d 	.word	0x0800609d
 800604c:	08005fe9 	.word	0x08005fe9
 8006050:	08005fe9 	.word	0x08005fe9
 8006054:	08006163 	.word	0x08006163
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	602a      	str	r2, [r5, #0]
 8006060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006068:	2301      	movs	r3, #1
 800606a:	e0a3      	b.n	80061b4 <_printf_i+0x1f4>
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	6829      	ldr	r1, [r5, #0]
 8006070:	0606      	lsls	r6, r0, #24
 8006072:	f101 0304 	add.w	r3, r1, #4
 8006076:	d50a      	bpl.n	800608e <_printf_i+0xce>
 8006078:	680e      	ldr	r6, [r1, #0]
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	2e00      	cmp	r6, #0
 800607e:	da03      	bge.n	8006088 <_printf_i+0xc8>
 8006080:	232d      	movs	r3, #45	; 0x2d
 8006082:	4276      	negs	r6, r6
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006088:	485e      	ldr	r0, [pc, #376]	; (8006204 <_printf_i+0x244>)
 800608a:	230a      	movs	r3, #10
 800608c:	e019      	b.n	80060c2 <_printf_i+0x102>
 800608e:	680e      	ldr	r6, [r1, #0]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006096:	bf18      	it	ne
 8006098:	b236      	sxthne	r6, r6
 800609a:	e7ef      	b.n	800607c <_printf_i+0xbc>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	6029      	str	r1, [r5, #0]
 80060a4:	0601      	lsls	r1, r0, #24
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0xec>
 80060a8:	681e      	ldr	r6, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0xf2>
 80060ac:	0646      	lsls	r6, r0, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0xe8>
 80060b0:	881e      	ldrh	r6, [r3, #0]
 80060b2:	4854      	ldr	r0, [pc, #336]	; (8006204 <_printf_i+0x244>)
 80060b4:	2f6f      	cmp	r7, #111	; 0x6f
 80060b6:	bf0c      	ite	eq
 80060b8:	2308      	moveq	r3, #8
 80060ba:	230a      	movne	r3, #10
 80060bc:	2100      	movs	r1, #0
 80060be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c2:	6865      	ldr	r5, [r4, #4]
 80060c4:	60a5      	str	r5, [r4, #8]
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	bfa2      	ittt	ge
 80060ca:	6821      	ldrge	r1, [r4, #0]
 80060cc:	f021 0104 	bicge.w	r1, r1, #4
 80060d0:	6021      	strge	r1, [r4, #0]
 80060d2:	b90e      	cbnz	r6, 80060d8 <_printf_i+0x118>
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	d04d      	beq.n	8006174 <_printf_i+0x1b4>
 80060d8:	4615      	mov	r5, r2
 80060da:	fbb6 f1f3 	udiv	r1, r6, r3
 80060de:	fb03 6711 	mls	r7, r3, r1, r6
 80060e2:	5dc7      	ldrb	r7, [r0, r7]
 80060e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060e8:	4637      	mov	r7, r6
 80060ea:	42bb      	cmp	r3, r7
 80060ec:	460e      	mov	r6, r1
 80060ee:	d9f4      	bls.n	80060da <_printf_i+0x11a>
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d10b      	bne.n	800610c <_printf_i+0x14c>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	07de      	lsls	r6, r3, #31
 80060f8:	d508      	bpl.n	800610c <_printf_i+0x14c>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4299      	cmp	r1, r3
 8006100:	bfde      	ittt	le
 8006102:	2330      	movle	r3, #48	; 0x30
 8006104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800610c:	1b52      	subs	r2, r2, r5
 800610e:	6122      	str	r2, [r4, #16]
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	464b      	mov	r3, r9
 8006116:	aa03      	add	r2, sp, #12
 8006118:	4621      	mov	r1, r4
 800611a:	4640      	mov	r0, r8
 800611c:	f7ff fee2 	bl	8005ee4 <_printf_common>
 8006120:	3001      	adds	r0, #1
 8006122:	d14c      	bne.n	80061be <_printf_i+0x1fe>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	b004      	add	sp, #16
 800612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612e:	4835      	ldr	r0, [pc, #212]	; (8006204 <_printf_i+0x244>)
 8006130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006134:	6829      	ldr	r1, [r5, #0]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	f851 6b04 	ldr.w	r6, [r1], #4
 800613c:	6029      	str	r1, [r5, #0]
 800613e:	061d      	lsls	r5, r3, #24
 8006140:	d514      	bpl.n	800616c <_printf_i+0x1ac>
 8006142:	07df      	lsls	r7, r3, #31
 8006144:	bf44      	itt	mi
 8006146:	f043 0320 	orrmi.w	r3, r3, #32
 800614a:	6023      	strmi	r3, [r4, #0]
 800614c:	b91e      	cbnz	r6, 8006156 <_printf_i+0x196>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	f023 0320 	bic.w	r3, r3, #32
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	2310      	movs	r3, #16
 8006158:	e7b0      	b.n	80060bc <_printf_i+0xfc>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	f043 0320 	orr.w	r3, r3, #32
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	2378      	movs	r3, #120	; 0x78
 8006164:	4828      	ldr	r0, [pc, #160]	; (8006208 <_printf_i+0x248>)
 8006166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800616a:	e7e3      	b.n	8006134 <_printf_i+0x174>
 800616c:	0659      	lsls	r1, r3, #25
 800616e:	bf48      	it	mi
 8006170:	b2b6      	uxthmi	r6, r6
 8006172:	e7e6      	b.n	8006142 <_printf_i+0x182>
 8006174:	4615      	mov	r5, r2
 8006176:	e7bb      	b.n	80060f0 <_printf_i+0x130>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6826      	ldr	r6, [r4, #0]
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	1d18      	adds	r0, r3, #4
 8006180:	6028      	str	r0, [r5, #0]
 8006182:	0635      	lsls	r5, r6, #24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	d501      	bpl.n	800618c <_printf_i+0x1cc>
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0x1d2>
 800618c:	0670      	lsls	r0, r6, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0x1c8>
 8006190:	8019      	strh	r1, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	4615      	mov	r5, r2
 8006198:	e7ba      	b.n	8006110 <_printf_i+0x150>
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	681d      	ldr	r5, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fa f882 	bl	80002b0 <memchr>
 80061ac:	b108      	cbz	r0, 80061b2 <_printf_i+0x1f2>
 80061ae:	1b40      	subs	r0, r0, r5
 80061b0:	6060      	str	r0, [r4, #4]
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061bc:	e7a8      	b.n	8006110 <_printf_i+0x150>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	462a      	mov	r2, r5
 80061c2:	4649      	mov	r1, r9
 80061c4:	4640      	mov	r0, r8
 80061c6:	47d0      	blx	sl
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0ab      	beq.n	8006124 <_printf_i+0x164>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	d413      	bmi.n	80061fa <_printf_i+0x23a>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e7a4      	b.n	8006128 <_printf_i+0x168>
 80061de:	2301      	movs	r3, #1
 80061e0:	4632      	mov	r2, r6
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d09b      	beq.n	8006124 <_printf_i+0x164>
 80061ec:	3501      	adds	r5, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	9903      	ldr	r1, [sp, #12]
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf2      	bgt.n	80061de <_printf_i+0x21e>
 80061f8:	e7eb      	b.n	80061d2 <_printf_i+0x212>
 80061fa:	2500      	movs	r5, #0
 80061fc:	f104 0619 	add.w	r6, r4, #25
 8006200:	e7f5      	b.n	80061ee <_printf_i+0x22e>
 8006202:	bf00      	nop
 8006204:	0801a87d 	.word	0x0801a87d
 8006208:	0801a88e 	.word	0x0801a88e

0800620c <memcpy>:
 800620c:	440a      	add	r2, r1
 800620e:	4291      	cmp	r1, r2
 8006210:	f100 33ff 	add.w	r3, r0, #4294967295
 8006214:	d100      	bne.n	8006218 <memcpy+0xc>
 8006216:	4770      	bx	lr
 8006218:	b510      	push	{r4, lr}
 800621a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800621e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006222:	4291      	cmp	r1, r2
 8006224:	d1f9      	bne.n	800621a <memcpy+0xe>
 8006226:	bd10      	pop	{r4, pc}

08006228 <memmove>:
 8006228:	4288      	cmp	r0, r1
 800622a:	b510      	push	{r4, lr}
 800622c:	eb01 0402 	add.w	r4, r1, r2
 8006230:	d902      	bls.n	8006238 <memmove+0x10>
 8006232:	4284      	cmp	r4, r0
 8006234:	4623      	mov	r3, r4
 8006236:	d807      	bhi.n	8006248 <memmove+0x20>
 8006238:	1e43      	subs	r3, r0, #1
 800623a:	42a1      	cmp	r1, r4
 800623c:	d008      	beq.n	8006250 <memmove+0x28>
 800623e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006246:	e7f8      	b.n	800623a <memmove+0x12>
 8006248:	4402      	add	r2, r0
 800624a:	4601      	mov	r1, r0
 800624c:	428a      	cmp	r2, r1
 800624e:	d100      	bne.n	8006252 <memmove+0x2a>
 8006250:	bd10      	pop	{r4, pc}
 8006252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800625a:	e7f7      	b.n	800624c <memmove+0x24>

0800625c <_free_r>:
 800625c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625e:	2900      	cmp	r1, #0
 8006260:	d044      	beq.n	80062ec <_free_r+0x90>
 8006262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f1a1 0404 	sub.w	r4, r1, #4
 800626e:	bfb8      	it	lt
 8006270:	18e4      	addlt	r4, r4, r3
 8006272:	f000 f913 	bl	800649c <__malloc_lock>
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <_free_r+0x94>)
 8006278:	9801      	ldr	r0, [sp, #4]
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x30>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	b003      	add	sp, #12
 8006284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006288:	f000 b90e 	b.w	80064a8 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x46>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1949      	addeq	r1, r1, r5
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x22>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x50>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x46>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1855      	adds	r5, r2, r1
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x70>
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	4421      	add	r1, r4
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x26>
 80062c0:	681c      	ldr	r4, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	4421      	add	r1, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x26>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x78>
 80062ce:	230c      	movs	r3, #12
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x26>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7ca      	b.n	8006282 <_free_r+0x26>
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	200073b4 	.word	0x200073b4

080062f4 <sbrk_aligned>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4e0e      	ldr	r6, [pc, #56]	; (8006330 <sbrk_aligned+0x3c>)
 80062f8:	460c      	mov	r4, r1
 80062fa:	6831      	ldr	r1, [r6, #0]
 80062fc:	4605      	mov	r5, r0
 80062fe:	b911      	cbnz	r1, 8006306 <sbrk_aligned+0x12>
 8006300:	f000 f8bc 	bl	800647c <_sbrk_r>
 8006304:	6030      	str	r0, [r6, #0]
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f8b7 	bl	800647c <_sbrk_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d00a      	beq.n	8006328 <sbrk_aligned+0x34>
 8006312:	1cc4      	adds	r4, r0, #3
 8006314:	f024 0403 	bic.w	r4, r4, #3
 8006318:	42a0      	cmp	r0, r4
 800631a:	d007      	beq.n	800632c <sbrk_aligned+0x38>
 800631c:	1a21      	subs	r1, r4, r0
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f8ac 	bl	800647c <_sbrk_r>
 8006324:	3001      	adds	r0, #1
 8006326:	d101      	bne.n	800632c <sbrk_aligned+0x38>
 8006328:	f04f 34ff 	mov.w	r4, #4294967295
 800632c:	4620      	mov	r0, r4
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	200073b8 	.word	0x200073b8

08006334 <_malloc_r>:
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	1ccd      	adds	r5, r1, #3
 800633a:	f025 0503 	bic.w	r5, r5, #3
 800633e:	3508      	adds	r5, #8
 8006340:	2d0c      	cmp	r5, #12
 8006342:	bf38      	it	cc
 8006344:	250c      	movcc	r5, #12
 8006346:	2d00      	cmp	r5, #0
 8006348:	4607      	mov	r7, r0
 800634a:	db01      	blt.n	8006350 <_malloc_r+0x1c>
 800634c:	42a9      	cmp	r1, r5
 800634e:	d905      	bls.n	800635c <_malloc_r+0x28>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	2600      	movs	r6, #0
 8006356:	4630      	mov	r0, r6
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635c:	4e2e      	ldr	r6, [pc, #184]	; (8006418 <_malloc_r+0xe4>)
 800635e:	f000 f89d 	bl	800649c <__malloc_lock>
 8006362:	6833      	ldr	r3, [r6, #0]
 8006364:	461c      	mov	r4, r3
 8006366:	bb34      	cbnz	r4, 80063b6 <_malloc_r+0x82>
 8006368:	4629      	mov	r1, r5
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ffc2 	bl	80062f4 <sbrk_aligned>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	4604      	mov	r4, r0
 8006374:	d14d      	bne.n	8006412 <_malloc_r+0xde>
 8006376:	6834      	ldr	r4, [r6, #0]
 8006378:	4626      	mov	r6, r4
 800637a:	2e00      	cmp	r6, #0
 800637c:	d140      	bne.n	8006400 <_malloc_r+0xcc>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4631      	mov	r1, r6
 8006382:	4638      	mov	r0, r7
 8006384:	eb04 0803 	add.w	r8, r4, r3
 8006388:	f000 f878 	bl	800647c <_sbrk_r>
 800638c:	4580      	cmp	r8, r0
 800638e:	d13a      	bne.n	8006406 <_malloc_r+0xd2>
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	3503      	adds	r5, #3
 8006394:	1a6d      	subs	r5, r5, r1
 8006396:	f025 0503 	bic.w	r5, r5, #3
 800639a:	3508      	adds	r5, #8
 800639c:	2d0c      	cmp	r5, #12
 800639e:	bf38      	it	cc
 80063a0:	250c      	movcc	r5, #12
 80063a2:	4629      	mov	r1, r5
 80063a4:	4638      	mov	r0, r7
 80063a6:	f7ff ffa5 	bl	80062f4 <sbrk_aligned>
 80063aa:	3001      	adds	r0, #1
 80063ac:	d02b      	beq.n	8006406 <_malloc_r+0xd2>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	442b      	add	r3, r5
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	e00e      	b.n	80063d4 <_malloc_r+0xa0>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	1b52      	subs	r2, r2, r5
 80063ba:	d41e      	bmi.n	80063fa <_malloc_r+0xc6>
 80063bc:	2a0b      	cmp	r2, #11
 80063be:	d916      	bls.n	80063ee <_malloc_r+0xba>
 80063c0:	1961      	adds	r1, r4, r5
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	6025      	str	r5, [r4, #0]
 80063c6:	bf18      	it	ne
 80063c8:	6059      	strne	r1, [r3, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	bf08      	it	eq
 80063ce:	6031      	streq	r1, [r6, #0]
 80063d0:	5162      	str	r2, [r4, r5]
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4638      	mov	r0, r7
 80063d6:	f104 060b 	add.w	r6, r4, #11
 80063da:	f000 f865 	bl	80064a8 <__malloc_unlock>
 80063de:	f026 0607 	bic.w	r6, r6, #7
 80063e2:	1d23      	adds	r3, r4, #4
 80063e4:	1af2      	subs	r2, r6, r3
 80063e6:	d0b6      	beq.n	8006356 <_malloc_r+0x22>
 80063e8:	1b9b      	subs	r3, r3, r6
 80063ea:	50a3      	str	r3, [r4, r2]
 80063ec:	e7b3      	b.n	8006356 <_malloc_r+0x22>
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	bf0c      	ite	eq
 80063f4:	6032      	streq	r2, [r6, #0]
 80063f6:	605a      	strne	r2, [r3, #4]
 80063f8:	e7ec      	b.n	80063d4 <_malloc_r+0xa0>
 80063fa:	4623      	mov	r3, r4
 80063fc:	6864      	ldr	r4, [r4, #4]
 80063fe:	e7b2      	b.n	8006366 <_malloc_r+0x32>
 8006400:	4634      	mov	r4, r6
 8006402:	6876      	ldr	r6, [r6, #4]
 8006404:	e7b9      	b.n	800637a <_malloc_r+0x46>
 8006406:	230c      	movs	r3, #12
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	4638      	mov	r0, r7
 800640c:	f000 f84c 	bl	80064a8 <__malloc_unlock>
 8006410:	e7a1      	b.n	8006356 <_malloc_r+0x22>
 8006412:	6025      	str	r5, [r4, #0]
 8006414:	e7de      	b.n	80063d4 <_malloc_r+0xa0>
 8006416:	bf00      	nop
 8006418:	200073b4 	.word	0x200073b4

0800641c <_realloc_r>:
 800641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006420:	4680      	mov	r8, r0
 8006422:	4614      	mov	r4, r2
 8006424:	460e      	mov	r6, r1
 8006426:	b921      	cbnz	r1, 8006432 <_realloc_r+0x16>
 8006428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800642c:	4611      	mov	r1, r2
 800642e:	f7ff bf81 	b.w	8006334 <_malloc_r>
 8006432:	b92a      	cbnz	r2, 8006440 <_realloc_r+0x24>
 8006434:	f7ff ff12 	bl	800625c <_free_r>
 8006438:	4625      	mov	r5, r4
 800643a:	4628      	mov	r0, r5
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	f000 f838 	bl	80064b4 <_malloc_usable_size_r>
 8006444:	4284      	cmp	r4, r0
 8006446:	4607      	mov	r7, r0
 8006448:	d802      	bhi.n	8006450 <_realloc_r+0x34>
 800644a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800644e:	d812      	bhi.n	8006476 <_realloc_r+0x5a>
 8006450:	4621      	mov	r1, r4
 8006452:	4640      	mov	r0, r8
 8006454:	f7ff ff6e 	bl	8006334 <_malloc_r>
 8006458:	4605      	mov	r5, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	d0ed      	beq.n	800643a <_realloc_r+0x1e>
 800645e:	42bc      	cmp	r4, r7
 8006460:	4622      	mov	r2, r4
 8006462:	4631      	mov	r1, r6
 8006464:	bf28      	it	cs
 8006466:	463a      	movcs	r2, r7
 8006468:	f7ff fed0 	bl	800620c <memcpy>
 800646c:	4631      	mov	r1, r6
 800646e:	4640      	mov	r0, r8
 8006470:	f7ff fef4 	bl	800625c <_free_r>
 8006474:	e7e1      	b.n	800643a <_realloc_r+0x1e>
 8006476:	4635      	mov	r5, r6
 8006478:	e7df      	b.n	800643a <_realloc_r+0x1e>
	...

0800647c <_sbrk_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_sbrk_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fb fcee 	bl	8001e68 <_sbrk>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_sbrk_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_sbrk_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	200073bc 	.word	0x200073bc

0800649c <__malloc_lock>:
 800649c:	4801      	ldr	r0, [pc, #4]	; (80064a4 <__malloc_lock+0x8>)
 800649e:	f000 b811 	b.w	80064c4 <__retarget_lock_acquire_recursive>
 80064a2:	bf00      	nop
 80064a4:	200073c0 	.word	0x200073c0

080064a8 <__malloc_unlock>:
 80064a8:	4801      	ldr	r0, [pc, #4]	; (80064b0 <__malloc_unlock+0x8>)
 80064aa:	f000 b80c 	b.w	80064c6 <__retarget_lock_release_recursive>
 80064ae:	bf00      	nop
 80064b0:	200073c0 	.word	0x200073c0

080064b4 <_malloc_usable_size_r>:
 80064b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b8:	1f18      	subs	r0, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfbc      	itt	lt
 80064be:	580b      	ldrlt	r3, [r1, r0]
 80064c0:	18c0      	addlt	r0, r0, r3
 80064c2:	4770      	bx	lr

080064c4 <__retarget_lock_acquire_recursive>:
 80064c4:	4770      	bx	lr

080064c6 <__retarget_lock_release_recursive>:
 80064c6:	4770      	bx	lr

080064c8 <pow>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	ed2d 8b02 	vpush	{d8}
 80064ce:	eeb0 8a40 	vmov.f32	s16, s0
 80064d2:	eef0 8a60 	vmov.f32	s17, s1
 80064d6:	ec55 4b11 	vmov	r4, r5, d1
 80064da:	f000 f885 	bl	80065e8 <__ieee754_pow>
 80064de:	4622      	mov	r2, r4
 80064e0:	462b      	mov	r3, r5
 80064e2:	4620      	mov	r0, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	ec57 6b10 	vmov	r6, r7, d0
 80064ea:	f7fa fb87 	bl	8000bfc <__aeabi_dcmpun>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d13b      	bne.n	800656a <pow+0xa2>
 80064f2:	ec51 0b18 	vmov	r0, r1, d8
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	f7fa fb4d 	bl	8000b98 <__aeabi_dcmpeq>
 80064fe:	b1b8      	cbz	r0, 8006530 <pow+0x68>
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa fb46 	bl	8000b98 <__aeabi_dcmpeq>
 800650c:	2800      	cmp	r0, #0
 800650e:	d146      	bne.n	800659e <pow+0xd6>
 8006510:	ec45 4b10 	vmov	d0, r4, r5
 8006514:	f000 fe84 	bl	8007220 <finite>
 8006518:	b338      	cbz	r0, 800656a <pow+0xa2>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa fb43 	bl	8000bac <__aeabi_dcmplt>
 8006526:	b300      	cbz	r0, 800656a <pow+0xa2>
 8006528:	f7ff fb2e 	bl	8005b88 <__errno>
 800652c:	2322      	movs	r3, #34	; 0x22
 800652e:	e01b      	b.n	8006568 <pow+0xa0>
 8006530:	ec47 6b10 	vmov	d0, r6, r7
 8006534:	f000 fe74 	bl	8007220 <finite>
 8006538:	b9e0      	cbnz	r0, 8006574 <pow+0xac>
 800653a:	eeb0 0a48 	vmov.f32	s0, s16
 800653e:	eef0 0a68 	vmov.f32	s1, s17
 8006542:	f000 fe6d 	bl	8007220 <finite>
 8006546:	b1a8      	cbz	r0, 8006574 <pow+0xac>
 8006548:	ec45 4b10 	vmov	d0, r4, r5
 800654c:	f000 fe68 	bl	8007220 <finite>
 8006550:	b180      	cbz	r0, 8006574 <pow+0xac>
 8006552:	4632      	mov	r2, r6
 8006554:	463b      	mov	r3, r7
 8006556:	4630      	mov	r0, r6
 8006558:	4639      	mov	r1, r7
 800655a:	f7fa fb4f 	bl	8000bfc <__aeabi_dcmpun>
 800655e:	2800      	cmp	r0, #0
 8006560:	d0e2      	beq.n	8006528 <pow+0x60>
 8006562:	f7ff fb11 	bl	8005b88 <__errno>
 8006566:	2321      	movs	r3, #33	; 0x21
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	ecbd 8b02 	vpop	{d8}
 800656e:	ec47 6b10 	vmov	d0, r6, r7
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	2200      	movs	r2, #0
 8006576:	2300      	movs	r3, #0
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa fb0c 	bl	8000b98 <__aeabi_dcmpeq>
 8006580:	2800      	cmp	r0, #0
 8006582:	d0f2      	beq.n	800656a <pow+0xa2>
 8006584:	eeb0 0a48 	vmov.f32	s0, s16
 8006588:	eef0 0a68 	vmov.f32	s1, s17
 800658c:	f000 fe48 	bl	8007220 <finite>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0ea      	beq.n	800656a <pow+0xa2>
 8006594:	ec45 4b10 	vmov	d0, r4, r5
 8006598:	f000 fe42 	bl	8007220 <finite>
 800659c:	e7c3      	b.n	8006526 <pow+0x5e>
 800659e:	4f01      	ldr	r7, [pc, #4]	; (80065a4 <pow+0xdc>)
 80065a0:	2600      	movs	r6, #0
 80065a2:	e7e2      	b.n	800656a <pow+0xa2>
 80065a4:	3ff00000 	.word	0x3ff00000

080065a8 <sqrtf>:
 80065a8:	b508      	push	{r3, lr}
 80065aa:	ed2d 8b02 	vpush	{d8}
 80065ae:	eeb0 8a40 	vmov.f32	s16, s0
 80065b2:	f000 fdf9 	bl	80071a8 <__ieee754_sqrtf>
 80065b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80065ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065be:	d60c      	bvs.n	80065da <sqrtf+0x32>
 80065c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80065e0 <sqrtf+0x38>
 80065c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80065c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065cc:	d505      	bpl.n	80065da <sqrtf+0x32>
 80065ce:	f7ff fadb 	bl	8005b88 <__errno>
 80065d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80065d6:	2321      	movs	r3, #33	; 0x21
 80065d8:	6003      	str	r3, [r0, #0]
 80065da:	ecbd 8b02 	vpop	{d8}
 80065de:	bd08      	pop	{r3, pc}
	...

080065e8 <__ieee754_pow>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	ed2d 8b06 	vpush	{d8-d10}
 80065f0:	b089      	sub	sp, #36	; 0x24
 80065f2:	ed8d 1b00 	vstr	d1, [sp]
 80065f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80065fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80065fe:	ea58 0102 	orrs.w	r1, r8, r2
 8006602:	ec57 6b10 	vmov	r6, r7, d0
 8006606:	d115      	bne.n	8006634 <__ieee754_pow+0x4c>
 8006608:	19b3      	adds	r3, r6, r6
 800660a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800660e:	4152      	adcs	r2, r2
 8006610:	4299      	cmp	r1, r3
 8006612:	4b89      	ldr	r3, [pc, #548]	; (8006838 <__ieee754_pow+0x250>)
 8006614:	4193      	sbcs	r3, r2
 8006616:	f080 84d2 	bcs.w	8006fbe <__ieee754_pow+0x9d6>
 800661a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800661e:	4630      	mov	r0, r6
 8006620:	4639      	mov	r1, r7
 8006622:	f7f9 fe9b 	bl	800035c <__adddf3>
 8006626:	ec41 0b10 	vmov	d0, r0, r1
 800662a:	b009      	add	sp, #36	; 0x24
 800662c:	ecbd 8b06 	vpop	{d8-d10}
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4b81      	ldr	r3, [pc, #516]	; (800683c <__ieee754_pow+0x254>)
 8006636:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800663a:	429c      	cmp	r4, r3
 800663c:	ee10 aa10 	vmov	sl, s0
 8006640:	463d      	mov	r5, r7
 8006642:	dc06      	bgt.n	8006652 <__ieee754_pow+0x6a>
 8006644:	d101      	bne.n	800664a <__ieee754_pow+0x62>
 8006646:	2e00      	cmp	r6, #0
 8006648:	d1e7      	bne.n	800661a <__ieee754_pow+0x32>
 800664a:	4598      	cmp	r8, r3
 800664c:	dc01      	bgt.n	8006652 <__ieee754_pow+0x6a>
 800664e:	d10f      	bne.n	8006670 <__ieee754_pow+0x88>
 8006650:	b172      	cbz	r2, 8006670 <__ieee754_pow+0x88>
 8006652:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006656:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800665a:	ea55 050a 	orrs.w	r5, r5, sl
 800665e:	d1dc      	bne.n	800661a <__ieee754_pow+0x32>
 8006660:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006664:	18db      	adds	r3, r3, r3
 8006666:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800666a:	4152      	adcs	r2, r2
 800666c:	429d      	cmp	r5, r3
 800666e:	e7d0      	b.n	8006612 <__ieee754_pow+0x2a>
 8006670:	2d00      	cmp	r5, #0
 8006672:	da3b      	bge.n	80066ec <__ieee754_pow+0x104>
 8006674:	4b72      	ldr	r3, [pc, #456]	; (8006840 <__ieee754_pow+0x258>)
 8006676:	4598      	cmp	r8, r3
 8006678:	dc51      	bgt.n	800671e <__ieee754_pow+0x136>
 800667a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800667e:	4598      	cmp	r8, r3
 8006680:	f340 84ac 	ble.w	8006fdc <__ieee754_pow+0x9f4>
 8006684:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006688:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800668c:	2b14      	cmp	r3, #20
 800668e:	dd0f      	ble.n	80066b0 <__ieee754_pow+0xc8>
 8006690:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006694:	fa22 f103 	lsr.w	r1, r2, r3
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	4293      	cmp	r3, r2
 800669e:	f040 849d 	bne.w	8006fdc <__ieee754_pow+0x9f4>
 80066a2:	f001 0101 	and.w	r1, r1, #1
 80066a6:	f1c1 0302 	rsb	r3, r1, #2
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	b182      	cbz	r2, 80066d0 <__ieee754_pow+0xe8>
 80066ae:	e05f      	b.n	8006770 <__ieee754_pow+0x188>
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	d15b      	bne.n	800676c <__ieee754_pow+0x184>
 80066b4:	f1c3 0314 	rsb	r3, r3, #20
 80066b8:	fa48 f103 	asr.w	r1, r8, r3
 80066bc:	fa01 f303 	lsl.w	r3, r1, r3
 80066c0:	4543      	cmp	r3, r8
 80066c2:	f040 8488 	bne.w	8006fd6 <__ieee754_pow+0x9ee>
 80066c6:	f001 0101 	and.w	r1, r1, #1
 80066ca:	f1c1 0302 	rsb	r3, r1, #2
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	4b5c      	ldr	r3, [pc, #368]	; (8006844 <__ieee754_pow+0x25c>)
 80066d2:	4598      	cmp	r8, r3
 80066d4:	d132      	bne.n	800673c <__ieee754_pow+0x154>
 80066d6:	f1b9 0f00 	cmp.w	r9, #0
 80066da:	f280 8478 	bge.w	8006fce <__ieee754_pow+0x9e6>
 80066de:	4959      	ldr	r1, [pc, #356]	; (8006844 <__ieee754_pow+0x25c>)
 80066e0:	4632      	mov	r2, r6
 80066e2:	463b      	mov	r3, r7
 80066e4:	2000      	movs	r0, #0
 80066e6:	f7fa f919 	bl	800091c <__aeabi_ddiv>
 80066ea:	e79c      	b.n	8006626 <__ieee754_pow+0x3e>
 80066ec:	2300      	movs	r3, #0
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d13d      	bne.n	8006770 <__ieee754_pow+0x188>
 80066f4:	4b51      	ldr	r3, [pc, #324]	; (800683c <__ieee754_pow+0x254>)
 80066f6:	4598      	cmp	r8, r3
 80066f8:	d1ea      	bne.n	80066d0 <__ieee754_pow+0xe8>
 80066fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006702:	ea53 030a 	orrs.w	r3, r3, sl
 8006706:	f000 845a 	beq.w	8006fbe <__ieee754_pow+0x9d6>
 800670a:	4b4f      	ldr	r3, [pc, #316]	; (8006848 <__ieee754_pow+0x260>)
 800670c:	429c      	cmp	r4, r3
 800670e:	dd08      	ble.n	8006722 <__ieee754_pow+0x13a>
 8006710:	f1b9 0f00 	cmp.w	r9, #0
 8006714:	f2c0 8457 	blt.w	8006fc6 <__ieee754_pow+0x9de>
 8006718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800671c:	e783      	b.n	8006626 <__ieee754_pow+0x3e>
 800671e:	2302      	movs	r3, #2
 8006720:	e7e5      	b.n	80066ee <__ieee754_pow+0x106>
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	f04f 0000 	mov.w	r0, #0
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	f6bf af7a 	bge.w	8006626 <__ieee754_pow+0x3e>
 8006732:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800673a:	e774      	b.n	8006626 <__ieee754_pow+0x3e>
 800673c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006740:	d106      	bne.n	8006750 <__ieee754_pow+0x168>
 8006742:	4632      	mov	r2, r6
 8006744:	463b      	mov	r3, r7
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7f9 ffbd 	bl	80006c8 <__aeabi_dmul>
 800674e:	e76a      	b.n	8006626 <__ieee754_pow+0x3e>
 8006750:	4b3e      	ldr	r3, [pc, #248]	; (800684c <__ieee754_pow+0x264>)
 8006752:	4599      	cmp	r9, r3
 8006754:	d10c      	bne.n	8006770 <__ieee754_pow+0x188>
 8006756:	2d00      	cmp	r5, #0
 8006758:	db0a      	blt.n	8006770 <__ieee754_pow+0x188>
 800675a:	ec47 6b10 	vmov	d0, r6, r7
 800675e:	b009      	add	sp, #36	; 0x24
 8006760:	ecbd 8b06 	vpop	{d8-d10}
 8006764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	f000 bc6c 	b.w	8007044 <__ieee754_sqrt>
 800676c:	2300      	movs	r3, #0
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	ec47 6b10 	vmov	d0, r6, r7
 8006774:	f000 fd4b 	bl	800720e <fabs>
 8006778:	ec51 0b10 	vmov	r0, r1, d0
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	d129      	bne.n	80067d6 <__ieee754_pow+0x1ee>
 8006782:	b124      	cbz	r4, 800678e <__ieee754_pow+0x1a6>
 8006784:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <__ieee754_pow+0x25c>)
 8006786:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800678a:	429a      	cmp	r2, r3
 800678c:	d123      	bne.n	80067d6 <__ieee754_pow+0x1ee>
 800678e:	f1b9 0f00 	cmp.w	r9, #0
 8006792:	da05      	bge.n	80067a0 <__ieee754_pow+0x1b8>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	2000      	movs	r0, #0
 800679a:	492a      	ldr	r1, [pc, #168]	; (8006844 <__ieee754_pow+0x25c>)
 800679c:	f7fa f8be 	bl	800091c <__aeabi_ddiv>
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	f6bf af40 	bge.w	8006626 <__ieee754_pow+0x3e>
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80067ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80067b0:	4323      	orrs	r3, r4
 80067b2:	d108      	bne.n	80067c6 <__ieee754_pow+0x1de>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f7f9 fdcc 	bl	8000358 <__aeabi_dsub>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	e78f      	b.n	80066e6 <__ieee754_pow+0xfe>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f47f af2c 	bne.w	8006626 <__ieee754_pow+0x3e>
 80067ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067d2:	4619      	mov	r1, r3
 80067d4:	e727      	b.n	8006626 <__ieee754_pow+0x3e>
 80067d6:	0feb      	lsrs	r3, r5, #31
 80067d8:	3b01      	subs	r3, #1
 80067da:	9306      	str	r3, [sp, #24]
 80067dc:	9a06      	ldr	r2, [sp, #24]
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d102      	bne.n	80067ea <__ieee754_pow+0x202>
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	e7e6      	b.n	80067b8 <__ieee754_pow+0x1d0>
 80067ea:	4b19      	ldr	r3, [pc, #100]	; (8006850 <__ieee754_pow+0x268>)
 80067ec:	4598      	cmp	r8, r3
 80067ee:	f340 80fb 	ble.w	80069e8 <__ieee754_pow+0x400>
 80067f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80067f6:	4598      	cmp	r8, r3
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <__ieee754_pow+0x260>)
 80067fa:	dd0c      	ble.n	8006816 <__ieee754_pow+0x22e>
 80067fc:	429c      	cmp	r4, r3
 80067fe:	dc0f      	bgt.n	8006820 <__ieee754_pow+0x238>
 8006800:	f1b9 0f00 	cmp.w	r9, #0
 8006804:	da0f      	bge.n	8006826 <__ieee754_pow+0x23e>
 8006806:	2000      	movs	r0, #0
 8006808:	b009      	add	sp, #36	; 0x24
 800680a:	ecbd 8b06 	vpop	{d8-d10}
 800680e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006812:	f000 bcf3 	b.w	80071fc <__math_oflow>
 8006816:	429c      	cmp	r4, r3
 8006818:	dbf2      	blt.n	8006800 <__ieee754_pow+0x218>
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <__ieee754_pow+0x25c>)
 800681c:	429c      	cmp	r4, r3
 800681e:	dd19      	ble.n	8006854 <__ieee754_pow+0x26c>
 8006820:	f1b9 0f00 	cmp.w	r9, #0
 8006824:	dcef      	bgt.n	8006806 <__ieee754_pow+0x21e>
 8006826:	2000      	movs	r0, #0
 8006828:	b009      	add	sp, #36	; 0x24
 800682a:	ecbd 8b06 	vpop	{d8-d10}
 800682e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006832:	f000 bcda 	b.w	80071ea <__math_uflow>
 8006836:	bf00      	nop
 8006838:	fff00000 	.word	0xfff00000
 800683c:	7ff00000 	.word	0x7ff00000
 8006840:	433fffff 	.word	0x433fffff
 8006844:	3ff00000 	.word	0x3ff00000
 8006848:	3fefffff 	.word	0x3fefffff
 800684c:	3fe00000 	.word	0x3fe00000
 8006850:	41e00000 	.word	0x41e00000
 8006854:	4b60      	ldr	r3, [pc, #384]	; (80069d8 <__ieee754_pow+0x3f0>)
 8006856:	2200      	movs	r2, #0
 8006858:	f7f9 fd7e 	bl	8000358 <__aeabi_dsub>
 800685c:	a354      	add	r3, pc, #336	; (adr r3, 80069b0 <__ieee754_pow+0x3c8>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	4604      	mov	r4, r0
 8006864:	460d      	mov	r5, r1
 8006866:	f7f9 ff2f 	bl	80006c8 <__aeabi_dmul>
 800686a:	a353      	add	r3, pc, #332	; (adr r3, 80069b8 <__ieee754_pow+0x3d0>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	4606      	mov	r6, r0
 8006872:	460f      	mov	r7, r1
 8006874:	4620      	mov	r0, r4
 8006876:	4629      	mov	r1, r5
 8006878:	f7f9 ff26 	bl	80006c8 <__aeabi_dmul>
 800687c:	4b57      	ldr	r3, [pc, #348]	; (80069dc <__ieee754_pow+0x3f4>)
 800687e:	4682      	mov	sl, r0
 8006880:	468b      	mov	fp, r1
 8006882:	2200      	movs	r2, #0
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 ff1e 	bl	80006c8 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	a14b      	add	r1, pc, #300	; (adr r1, 80069c0 <__ieee754_pow+0x3d8>)
 8006892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006896:	f7f9 fd5f 	bl	8000358 <__aeabi_dsub>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	f7f9 ff13 	bl	80006c8 <__aeabi_dmul>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	2000      	movs	r0, #0
 80068a8:	494d      	ldr	r1, [pc, #308]	; (80069e0 <__ieee754_pow+0x3f8>)
 80068aa:	f7f9 fd55 	bl	8000358 <__aeabi_dsub>
 80068ae:	4622      	mov	r2, r4
 80068b0:	4680      	mov	r8, r0
 80068b2:	4689      	mov	r9, r1
 80068b4:	462b      	mov	r3, r5
 80068b6:	4620      	mov	r0, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	f7f9 ff05 	bl	80006c8 <__aeabi_dmul>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4640      	mov	r0, r8
 80068c4:	4649      	mov	r1, r9
 80068c6:	f7f9 feff 	bl	80006c8 <__aeabi_dmul>
 80068ca:	a33f      	add	r3, pc, #252	; (adr r3, 80069c8 <__ieee754_pow+0x3e0>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fefa 	bl	80006c8 <__aeabi_dmul>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4650      	mov	r0, sl
 80068da:	4659      	mov	r1, fp
 80068dc:	f7f9 fd3c 	bl	8000358 <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	4630      	mov	r0, r6
 80068ea:	4639      	mov	r1, r7
 80068ec:	f7f9 fd36 	bl	800035c <__adddf3>
 80068f0:	2000      	movs	r0, #0
 80068f2:	4632      	mov	r2, r6
 80068f4:	463b      	mov	r3, r7
 80068f6:	4604      	mov	r4, r0
 80068f8:	460d      	mov	r5, r1
 80068fa:	f7f9 fd2d 	bl	8000358 <__aeabi_dsub>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fd27 	bl	8000358 <__aeabi_dsub>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	9a06      	ldr	r2, [sp, #24]
 800690e:	3b01      	subs	r3, #1
 8006910:	4313      	orrs	r3, r2
 8006912:	4682      	mov	sl, r0
 8006914:	468b      	mov	fp, r1
 8006916:	f040 81e7 	bne.w	8006ce8 <__ieee754_pow+0x700>
 800691a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80069d0 <__ieee754_pow+0x3e8>
 800691e:	eeb0 8a47 	vmov.f32	s16, s14
 8006922:	eef0 8a67 	vmov.f32	s17, s15
 8006926:	e9dd 6700 	ldrd	r6, r7, [sp]
 800692a:	2600      	movs	r6, #0
 800692c:	4632      	mov	r2, r6
 800692e:	463b      	mov	r3, r7
 8006930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006934:	f7f9 fd10 	bl	8000358 <__aeabi_dsub>
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	f7f9 fec4 	bl	80006c8 <__aeabi_dmul>
 8006940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006944:	4680      	mov	r8, r0
 8006946:	4689      	mov	r9, r1
 8006948:	4650      	mov	r0, sl
 800694a:	4659      	mov	r1, fp
 800694c:	f7f9 febc 	bl	80006c8 <__aeabi_dmul>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4640      	mov	r0, r8
 8006956:	4649      	mov	r1, r9
 8006958:	f7f9 fd00 	bl	800035c <__adddf3>
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	4680      	mov	r8, r0
 8006962:	4689      	mov	r9, r1
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f7f9 feae 	bl	80006c8 <__aeabi_dmul>
 800696c:	460b      	mov	r3, r1
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	4602      	mov	r2, r0
 8006974:	4649      	mov	r1, r9
 8006976:	4640      	mov	r0, r8
 8006978:	f7f9 fcf0 	bl	800035c <__adddf3>
 800697c:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <__ieee754_pow+0x3fc>)
 800697e:	4299      	cmp	r1, r3
 8006980:	ec45 4b19 	vmov	d9, r4, r5
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	468b      	mov	fp, r1
 800698a:	f340 82f1 	ble.w	8006f70 <__ieee754_pow+0x988>
 800698e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006992:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006996:	4303      	orrs	r3, r0
 8006998:	f000 81e4 	beq.w	8006d64 <__ieee754_pow+0x77c>
 800699c:	ec51 0b18 	vmov	r0, r1, d8
 80069a0:	2200      	movs	r2, #0
 80069a2:	2300      	movs	r3, #0
 80069a4:	f7fa f902 	bl	8000bac <__aeabi_dcmplt>
 80069a8:	3800      	subs	r0, #0
 80069aa:	bf18      	it	ne
 80069ac:	2001      	movne	r0, #1
 80069ae:	e72b      	b.n	8006808 <__ieee754_pow+0x220>
 80069b0:	60000000 	.word	0x60000000
 80069b4:	3ff71547 	.word	0x3ff71547
 80069b8:	f85ddf44 	.word	0xf85ddf44
 80069bc:	3e54ae0b 	.word	0x3e54ae0b
 80069c0:	55555555 	.word	0x55555555
 80069c4:	3fd55555 	.word	0x3fd55555
 80069c8:	652b82fe 	.word	0x652b82fe
 80069cc:	3ff71547 	.word	0x3ff71547
 80069d0:	00000000 	.word	0x00000000
 80069d4:	bff00000 	.word	0xbff00000
 80069d8:	3ff00000 	.word	0x3ff00000
 80069dc:	3fd00000 	.word	0x3fd00000
 80069e0:	3fe00000 	.word	0x3fe00000
 80069e4:	408fffff 	.word	0x408fffff
 80069e8:	4bd5      	ldr	r3, [pc, #852]	; (8006d40 <__ieee754_pow+0x758>)
 80069ea:	402b      	ands	r3, r5
 80069ec:	2200      	movs	r2, #0
 80069ee:	b92b      	cbnz	r3, 80069fc <__ieee754_pow+0x414>
 80069f0:	4bd4      	ldr	r3, [pc, #848]	; (8006d44 <__ieee754_pow+0x75c>)
 80069f2:	f7f9 fe69 	bl	80006c8 <__aeabi_dmul>
 80069f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80069fa:	460c      	mov	r4, r1
 80069fc:	1523      	asrs	r3, r4, #20
 80069fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a02:	4413      	add	r3, r2
 8006a04:	9305      	str	r3, [sp, #20]
 8006a06:	4bd0      	ldr	r3, [pc, #832]	; (8006d48 <__ieee754_pow+0x760>)
 8006a08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a10:	429c      	cmp	r4, r3
 8006a12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a16:	dd08      	ble.n	8006a2a <__ieee754_pow+0x442>
 8006a18:	4bcc      	ldr	r3, [pc, #816]	; (8006d4c <__ieee754_pow+0x764>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	f340 8162 	ble.w	8006ce4 <__ieee754_pow+0x6fc>
 8006a20:	9b05      	ldr	r3, [sp, #20]
 8006a22:	3301      	adds	r3, #1
 8006a24:	9305      	str	r3, [sp, #20]
 8006a26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a2a:	2400      	movs	r4, #0
 8006a2c:	00e3      	lsls	r3, r4, #3
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	4bc7      	ldr	r3, [pc, #796]	; (8006d50 <__ieee754_pow+0x768>)
 8006a32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a36:	ed93 7b00 	vldr	d7, [r3]
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	ec53 2b17 	vmov	r2, r3, d7
 8006a40:	eeb0 9a47 	vmov.f32	s18, s14
 8006a44:	eef0 9a67 	vmov.f32	s19, s15
 8006a48:	4682      	mov	sl, r0
 8006a4a:	f7f9 fc85 	bl	8000358 <__aeabi_dsub>
 8006a4e:	4652      	mov	r2, sl
 8006a50:	4606      	mov	r6, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	462b      	mov	r3, r5
 8006a56:	ec51 0b19 	vmov	r0, r1, d9
 8006a5a:	f7f9 fc7f 	bl	800035c <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	2000      	movs	r0, #0
 8006a64:	49bb      	ldr	r1, [pc, #748]	; (8006d54 <__ieee754_pow+0x76c>)
 8006a66:	f7f9 ff59 	bl	800091c <__aeabi_ddiv>
 8006a6a:	ec41 0b1a 	vmov	d10, r0, r1
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4630      	mov	r0, r6
 8006a74:	4639      	mov	r1, r7
 8006a76:	f7f9 fe27 	bl	80006c8 <__aeabi_dmul>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a86:	46ab      	mov	fp, r5
 8006a88:	106d      	asrs	r5, r5, #1
 8006a8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a92:	ec41 0b18 	vmov	d8, r0, r1
 8006a96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	461d      	mov	r5, r3
 8006aa4:	f7f9 fe10 	bl	80006c8 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fc52 	bl	8000358 <__aeabi_dsub>
 8006ab4:	ec53 2b19 	vmov	r2, r3, d9
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460f      	mov	r7, r1
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7f9 fc4a 	bl	8000358 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4650      	mov	r0, sl
 8006aca:	4659      	mov	r1, fp
 8006acc:	f7f9 fc44 	bl	8000358 <__aeabi_dsub>
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	f7f9 fdf8 	bl	80006c8 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fc3a 	bl	8000358 <__aeabi_dsub>
 8006ae4:	ec53 2b1a 	vmov	r2, r3, d10
 8006ae8:	f7f9 fdee 	bl	80006c8 <__aeabi_dmul>
 8006aec:	ec53 2b18 	vmov	r2, r3, d8
 8006af0:	ec41 0b19 	vmov	d9, r0, r1
 8006af4:	ec51 0b18 	vmov	r0, r1, d8
 8006af8:	f7f9 fde6 	bl	80006c8 <__aeabi_dmul>
 8006afc:	a37c      	add	r3, pc, #496	; (adr r3, 8006cf0 <__ieee754_pow+0x708>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	4604      	mov	r4, r0
 8006b04:	460d      	mov	r5, r1
 8006b06:	f7f9 fddf 	bl	80006c8 <__aeabi_dmul>
 8006b0a:	a37b      	add	r3, pc, #492	; (adr r3, 8006cf8 <__ieee754_pow+0x710>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fc24 	bl	800035c <__adddf3>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7f9 fdd6 	bl	80006c8 <__aeabi_dmul>
 8006b1c:	a378      	add	r3, pc, #480	; (adr r3, 8006d00 <__ieee754_pow+0x718>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fc1b 	bl	800035c <__adddf3>
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	f7f9 fdcd 	bl	80006c8 <__aeabi_dmul>
 8006b2e:	a376      	add	r3, pc, #472	; (adr r3, 8006d08 <__ieee754_pow+0x720>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fc12 	bl	800035c <__adddf3>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fdc4 	bl	80006c8 <__aeabi_dmul>
 8006b40:	a373      	add	r3, pc, #460	; (adr r3, 8006d10 <__ieee754_pow+0x728>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fc09 	bl	800035c <__adddf3>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	f7f9 fdbb 	bl	80006c8 <__aeabi_dmul>
 8006b52:	a371      	add	r3, pc, #452	; (adr r3, 8006d18 <__ieee754_pow+0x730>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fc00 	bl	800035c <__adddf3>
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460f      	mov	r7, r1
 8006b62:	462b      	mov	r3, r5
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 fdae 	bl	80006c8 <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 fda8 	bl	80006c8 <__aeabi_dmul>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	464b      	mov	r3, r9
 8006b80:	ec51 0b18 	vmov	r0, r1, d8
 8006b84:	f7f9 fbea 	bl	800035c <__adddf3>
 8006b88:	ec53 2b19 	vmov	r2, r3, d9
 8006b8c:	f7f9 fd9c 	bl	80006c8 <__aeabi_dmul>
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	f7f9 fbe2 	bl	800035c <__adddf3>
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4682      	mov	sl, r0
 8006b9c:	468b      	mov	fp, r1
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	f7f9 fd90 	bl	80006c8 <__aeabi_dmul>
 8006ba8:	4b6b      	ldr	r3, [pc, #428]	; (8006d58 <__ieee754_pow+0x770>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	f7f9 fbd4 	bl	800035c <__adddf3>
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	f7f9 fbd0 	bl	800035c <__adddf3>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fd7d 	bl	80006c8 <__aeabi_dmul>
 8006bce:	4b62      	ldr	r3, [pc, #392]	; (8006d58 <__ieee754_pow+0x770>)
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4689      	mov	r9, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fbbd 	bl	8000358 <__aeabi_dsub>
 8006bde:	4632      	mov	r2, r6
 8006be0:	463b      	mov	r3, r7
 8006be2:	f7f9 fbb9 	bl	8000358 <__aeabi_dsub>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4650      	mov	r0, sl
 8006bec:	4659      	mov	r1, fp
 8006bee:	f7f9 fbb3 	bl	8000358 <__aeabi_dsub>
 8006bf2:	ec53 2b18 	vmov	r2, r3, d8
 8006bf6:	f7f9 fd67 	bl	80006c8 <__aeabi_dmul>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	462b      	mov	r3, r5
 8006c02:	ec51 0b19 	vmov	r0, r1, d9
 8006c06:	f7f9 fd5f 	bl	80006c8 <__aeabi_dmul>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	f7f9 fba3 	bl	800035c <__adddf3>
 8006c16:	4606      	mov	r6, r0
 8006c18:	460f      	mov	r7, r1
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7f9 fb9b 	bl	800035c <__adddf3>
 8006c26:	a33e      	add	r3, pc, #248	; (adr r3, 8006d20 <__ieee754_pow+0x738>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	460d      	mov	r5, r1
 8006c32:	f7f9 fd49 	bl	80006c8 <__aeabi_dmul>
 8006c36:	4642      	mov	r2, r8
 8006c38:	ec41 0b18 	vmov	d8, r0, r1
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fb89 	bl	8000358 <__aeabi_dsub>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fb83 	bl	8000358 <__aeabi_dsub>
 8006c52:	a335      	add	r3, pc, #212	; (adr r3, 8006d28 <__ieee754_pow+0x740>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fd36 	bl	80006c8 <__aeabi_dmul>
 8006c5c:	a334      	add	r3, pc, #208	; (adr r3, 8006d30 <__ieee754_pow+0x748>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	4606      	mov	r6, r0
 8006c64:	460f      	mov	r7, r1
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fd2d 	bl	80006c8 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	f7f9 fb71 	bl	800035c <__adddf3>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	4b37      	ldr	r3, [pc, #220]	; (8006d5c <__ieee754_pow+0x774>)
 8006c7e:	4413      	add	r3, r2
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fb6a 	bl	800035c <__adddf3>
 8006c88:	4682      	mov	sl, r0
 8006c8a:	9805      	ldr	r0, [sp, #20]
 8006c8c:	468b      	mov	fp, r1
 8006c8e:	f7f9 fcb1 	bl	80005f4 <__aeabi_i2d>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	4b32      	ldr	r3, [pc, #200]	; (8006d60 <__ieee754_pow+0x778>)
 8006c96:	4413      	add	r3, r2
 8006c98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	4652      	mov	r2, sl
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	ec51 0b18 	vmov	r0, r1, d8
 8006ca8:	f7f9 fb58 	bl	800035c <__adddf3>
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	f7f9 fb54 	bl	800035c <__adddf3>
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	f7f9 fb50 	bl	800035c <__adddf3>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	f7f9 fb47 	bl	8000358 <__aeabi_dsub>
 8006cca:	4642      	mov	r2, r8
 8006ccc:	464b      	mov	r3, r9
 8006cce:	f7f9 fb43 	bl	8000358 <__aeabi_dsub>
 8006cd2:	ec53 2b18 	vmov	r2, r3, d8
 8006cd6:	f7f9 fb3f 	bl	8000358 <__aeabi_dsub>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4650      	mov	r0, sl
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	e610      	b.n	8006906 <__ieee754_pow+0x31e>
 8006ce4:	2401      	movs	r4, #1
 8006ce6:	e6a1      	b.n	8006a2c <__ieee754_pow+0x444>
 8006ce8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006d38 <__ieee754_pow+0x750>
 8006cec:	e617      	b.n	800691e <__ieee754_pow+0x336>
 8006cee:	bf00      	nop
 8006cf0:	4a454eef 	.word	0x4a454eef
 8006cf4:	3fca7e28 	.word	0x3fca7e28
 8006cf8:	93c9db65 	.word	0x93c9db65
 8006cfc:	3fcd864a 	.word	0x3fcd864a
 8006d00:	a91d4101 	.word	0xa91d4101
 8006d04:	3fd17460 	.word	0x3fd17460
 8006d08:	518f264d 	.word	0x518f264d
 8006d0c:	3fd55555 	.word	0x3fd55555
 8006d10:	db6fabff 	.word	0xdb6fabff
 8006d14:	3fdb6db6 	.word	0x3fdb6db6
 8006d18:	33333303 	.word	0x33333303
 8006d1c:	3fe33333 	.word	0x3fe33333
 8006d20:	e0000000 	.word	0xe0000000
 8006d24:	3feec709 	.word	0x3feec709
 8006d28:	dc3a03fd 	.word	0xdc3a03fd
 8006d2c:	3feec709 	.word	0x3feec709
 8006d30:	145b01f5 	.word	0x145b01f5
 8006d34:	be3e2fe0 	.word	0xbe3e2fe0
 8006d38:	00000000 	.word	0x00000000
 8006d3c:	3ff00000 	.word	0x3ff00000
 8006d40:	7ff00000 	.word	0x7ff00000
 8006d44:	43400000 	.word	0x43400000
 8006d48:	0003988e 	.word	0x0003988e
 8006d4c:	000bb679 	.word	0x000bb679
 8006d50:	0801a8a0 	.word	0x0801a8a0
 8006d54:	3ff00000 	.word	0x3ff00000
 8006d58:	40080000 	.word	0x40080000
 8006d5c:	0801a8c0 	.word	0x0801a8c0
 8006d60:	0801a8b0 	.word	0x0801a8b0
 8006d64:	a3b5      	add	r3, pc, #724	; (adr r3, 800703c <__ieee754_pow+0xa54>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	f7f9 faf5 	bl	800035c <__adddf3>
 8006d72:	4622      	mov	r2, r4
 8006d74:	ec41 0b1a 	vmov	d10, r0, r1
 8006d78:	462b      	mov	r3, r5
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 faeb 	bl	8000358 <__aeabi_dsub>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	ec51 0b1a 	vmov	r0, r1, d10
 8006d8a:	f7f9 ff2d 	bl	8000be8 <__aeabi_dcmpgt>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f47f ae04 	bne.w	800699c <__ieee754_pow+0x3b4>
 8006d94:	4aa4      	ldr	r2, [pc, #656]	; (8007028 <__ieee754_pow+0xa40>)
 8006d96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f340 8108 	ble.w	8006fb0 <__ieee754_pow+0x9c8>
 8006da0:	151b      	asrs	r3, r3, #20
 8006da2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006da6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006daa:	fa4a f303 	asr.w	r3, sl, r3
 8006dae:	445b      	add	r3, fp
 8006db0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006db4:	4e9d      	ldr	r6, [pc, #628]	; (800702c <__ieee754_pow+0xa44>)
 8006db6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006dba:	4116      	asrs	r6, r2
 8006dbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	ea23 0106 	bic.w	r1, r3, r6
 8006dc6:	f1c2 0214 	rsb	r2, r2, #20
 8006dca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006dce:	fa4a fa02 	asr.w	sl, sl, r2
 8006dd2:	f1bb 0f00 	cmp.w	fp, #0
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4620      	mov	r0, r4
 8006ddc:	4629      	mov	r1, r5
 8006dde:	bfb8      	it	lt
 8006de0:	f1ca 0a00 	rsblt	sl, sl, #0
 8006de4:	f7f9 fab8 	bl	8000358 <__aeabi_dsub>
 8006de8:	ec41 0b19 	vmov	d9, r0, r1
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	ec51 0b19 	vmov	r0, r1, d9
 8006df4:	f7f9 fab2 	bl	800035c <__adddf3>
 8006df8:	a37b      	add	r3, pc, #492	; (adr r3, 8006fe8 <__ieee754_pow+0xa00>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	4604      	mov	r4, r0
 8006e02:	460d      	mov	r5, r1
 8006e04:	f7f9 fc60 	bl	80006c8 <__aeabi_dmul>
 8006e08:	ec53 2b19 	vmov	r2, r3, d9
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	460f      	mov	r7, r1
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 faa0 	bl	8000358 <__aeabi_dsub>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	f7f9 fa9a 	bl	8000358 <__aeabi_dsub>
 8006e24:	a372      	add	r3, pc, #456	; (adr r3, 8006ff0 <__ieee754_pow+0xa08>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fc4d 	bl	80006c8 <__aeabi_dmul>
 8006e2e:	a372      	add	r3, pc, #456	; (adr r3, 8006ff8 <__ieee754_pow+0xa10>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	4680      	mov	r8, r0
 8006e36:	4689      	mov	r9, r1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 fc44 	bl	80006c8 <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fa88 	bl	800035c <__adddf3>
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4630      	mov	r0, r6
 8006e56:	4639      	mov	r1, r7
 8006e58:	f7f9 fa80 	bl	800035c <__adddf3>
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	463b      	mov	r3, r7
 8006e60:	4680      	mov	r8, r0
 8006e62:	4689      	mov	r9, r1
 8006e64:	f7f9 fa78 	bl	8000358 <__aeabi_dsub>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fa72 	bl	8000358 <__aeabi_dsub>
 8006e74:	4642      	mov	r2, r8
 8006e76:	4606      	mov	r6, r0
 8006e78:	460f      	mov	r7, r1
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fc22 	bl	80006c8 <__aeabi_dmul>
 8006e84:	a35e      	add	r3, pc, #376	; (adr r3, 8007000 <__ieee754_pow+0xa18>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	f7f9 fc1b 	bl	80006c8 <__aeabi_dmul>
 8006e92:	a35d      	add	r3, pc, #372	; (adr r3, 8007008 <__ieee754_pow+0xa20>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 fa5e 	bl	8000358 <__aeabi_dsub>
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	f7f9 fc12 	bl	80006c8 <__aeabi_dmul>
 8006ea4:	a35a      	add	r3, pc, #360	; (adr r3, 8007010 <__ieee754_pow+0xa28>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 fa57 	bl	800035c <__adddf3>
 8006eae:	4622      	mov	r2, r4
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	f7f9 fc09 	bl	80006c8 <__aeabi_dmul>
 8006eb6:	a358      	add	r3, pc, #352	; (adr r3, 8007018 <__ieee754_pow+0xa30>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 fa4c 	bl	8000358 <__aeabi_dsub>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f7f9 fc00 	bl	80006c8 <__aeabi_dmul>
 8006ec8:	a355      	add	r3, pc, #340	; (adr r3, 8007020 <__ieee754_pow+0xa38>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 fa45 	bl	800035c <__adddf3>
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	f7f9 fbf7 	bl	80006c8 <__aeabi_dmul>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 fa39 	bl	8000358 <__aeabi_dsub>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 fbe9 	bl	80006c8 <__aeabi_dmul>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	ec41 0b19 	vmov	d9, r0, r1
 8006efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fa28 	bl	8000358 <__aeabi_dsub>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	ec51 0b19 	vmov	r0, r1, d9
 8006f10:	f7f9 fd04 	bl	800091c <__aeabi_ddiv>
 8006f14:	4632      	mov	r2, r6
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fbd2 	bl	80006c8 <__aeabi_dmul>
 8006f24:	4632      	mov	r2, r6
 8006f26:	463b      	mov	r3, r7
 8006f28:	f7f9 fa18 	bl	800035c <__adddf3>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 fa10 	bl	8000358 <__aeabi_dsub>
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	f7f9 fa0c 	bl	8000358 <__aeabi_dsub>
 8006f40:	460b      	mov	r3, r1
 8006f42:	4602      	mov	r2, r0
 8006f44:	493a      	ldr	r1, [pc, #232]	; (8007030 <__ieee754_pow+0xa48>)
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7f9 fa06 	bl	8000358 <__aeabi_dsub>
 8006f4c:	ec41 0b10 	vmov	d0, r0, r1
 8006f50:	ee10 3a90 	vmov	r3, s1
 8006f54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5c:	da2b      	bge.n	8006fb6 <__ieee754_pow+0x9ce>
 8006f5e:	4650      	mov	r0, sl
 8006f60:	f000 f96a 	bl	8007238 <scalbn>
 8006f64:	ec51 0b10 	vmov	r0, r1, d0
 8006f68:	ec53 2b18 	vmov	r2, r3, d8
 8006f6c:	f7ff bbed 	b.w	800674a <__ieee754_pow+0x162>
 8006f70:	4b30      	ldr	r3, [pc, #192]	; (8007034 <__ieee754_pow+0xa4c>)
 8006f72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f76:	429e      	cmp	r6, r3
 8006f78:	f77f af0c 	ble.w	8006d94 <__ieee754_pow+0x7ac>
 8006f7c:	4b2e      	ldr	r3, [pc, #184]	; (8007038 <__ieee754_pow+0xa50>)
 8006f7e:	440b      	add	r3, r1
 8006f80:	4303      	orrs	r3, r0
 8006f82:	d009      	beq.n	8006f98 <__ieee754_pow+0x9b0>
 8006f84:	ec51 0b18 	vmov	r0, r1, d8
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f7f9 fe0e 	bl	8000bac <__aeabi_dcmplt>
 8006f90:	3800      	subs	r0, #0
 8006f92:	bf18      	it	ne
 8006f94:	2001      	movne	r0, #1
 8006f96:	e447      	b.n	8006828 <__ieee754_pow+0x240>
 8006f98:	4622      	mov	r2, r4
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	f7f9 f9dc 	bl	8000358 <__aeabi_dsub>
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	f7f9 fe16 	bl	8000bd4 <__aeabi_dcmpge>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f43f aef3 	beq.w	8006d94 <__ieee754_pow+0x7ac>
 8006fae:	e7e9      	b.n	8006f84 <__ieee754_pow+0x99c>
 8006fb0:	f04f 0a00 	mov.w	sl, #0
 8006fb4:	e71a      	b.n	8006dec <__ieee754_pow+0x804>
 8006fb6:	ec51 0b10 	vmov	r0, r1, d0
 8006fba:	4619      	mov	r1, r3
 8006fbc:	e7d4      	b.n	8006f68 <__ieee754_pow+0x980>
 8006fbe:	491c      	ldr	r1, [pc, #112]	; (8007030 <__ieee754_pow+0xa48>)
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f7ff bb30 	b.w	8006626 <__ieee754_pow+0x3e>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	2100      	movs	r1, #0
 8006fca:	f7ff bb2c 	b.w	8006626 <__ieee754_pow+0x3e>
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7ff bb28 	b.w	8006626 <__ieee754_pow+0x3e>
 8006fd6:	9204      	str	r2, [sp, #16]
 8006fd8:	f7ff bb7a 	b.w	80066d0 <__ieee754_pow+0xe8>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f7ff bb64 	b.w	80066aa <__ieee754_pow+0xc2>
 8006fe2:	bf00      	nop
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	00000000 	.word	0x00000000
 8006fec:	3fe62e43 	.word	0x3fe62e43
 8006ff0:	fefa39ef 	.word	0xfefa39ef
 8006ff4:	3fe62e42 	.word	0x3fe62e42
 8006ff8:	0ca86c39 	.word	0x0ca86c39
 8006ffc:	be205c61 	.word	0xbe205c61
 8007000:	72bea4d0 	.word	0x72bea4d0
 8007004:	3e663769 	.word	0x3e663769
 8007008:	c5d26bf1 	.word	0xc5d26bf1
 800700c:	3ebbbd41 	.word	0x3ebbbd41
 8007010:	af25de2c 	.word	0xaf25de2c
 8007014:	3f11566a 	.word	0x3f11566a
 8007018:	16bebd93 	.word	0x16bebd93
 800701c:	3f66c16c 	.word	0x3f66c16c
 8007020:	5555553e 	.word	0x5555553e
 8007024:	3fc55555 	.word	0x3fc55555
 8007028:	3fe00000 	.word	0x3fe00000
 800702c:	000fffff 	.word	0x000fffff
 8007030:	3ff00000 	.word	0x3ff00000
 8007034:	4090cbff 	.word	0x4090cbff
 8007038:	3f6f3400 	.word	0x3f6f3400
 800703c:	652b82fe 	.word	0x652b82fe
 8007040:	3c971547 	.word	0x3c971547

08007044 <__ieee754_sqrt>:
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	ec55 4b10 	vmov	r4, r5, d0
 800704c:	4e55      	ldr	r6, [pc, #340]	; (80071a4 <__ieee754_sqrt+0x160>)
 800704e:	43ae      	bics	r6, r5
 8007050:	ee10 0a10 	vmov	r0, s0
 8007054:	ee10 3a10 	vmov	r3, s0
 8007058:	462a      	mov	r2, r5
 800705a:	4629      	mov	r1, r5
 800705c:	d110      	bne.n	8007080 <__ieee754_sqrt+0x3c>
 800705e:	ee10 2a10 	vmov	r2, s0
 8007062:	462b      	mov	r3, r5
 8007064:	f7f9 fb30 	bl	80006c8 <__aeabi_dmul>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 f974 	bl	800035c <__adddf3>
 8007074:	4604      	mov	r4, r0
 8007076:	460d      	mov	r5, r1
 8007078:	ec45 4b10 	vmov	d0, r4, r5
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	2d00      	cmp	r5, #0
 8007082:	dc10      	bgt.n	80070a6 <__ieee754_sqrt+0x62>
 8007084:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007088:	4330      	orrs	r0, r6
 800708a:	d0f5      	beq.n	8007078 <__ieee754_sqrt+0x34>
 800708c:	b15d      	cbz	r5, 80070a6 <__ieee754_sqrt+0x62>
 800708e:	ee10 2a10 	vmov	r2, s0
 8007092:	462b      	mov	r3, r5
 8007094:	ee10 0a10 	vmov	r0, s0
 8007098:	f7f9 f95e 	bl	8000358 <__aeabi_dsub>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	f7f9 fc3c 	bl	800091c <__aeabi_ddiv>
 80070a4:	e7e6      	b.n	8007074 <__ieee754_sqrt+0x30>
 80070a6:	1512      	asrs	r2, r2, #20
 80070a8:	d074      	beq.n	8007194 <__ieee754_sqrt+0x150>
 80070aa:	07d4      	lsls	r4, r2, #31
 80070ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80070b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80070b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070b8:	bf5e      	ittt	pl
 80070ba:	0fda      	lsrpl	r2, r3, #31
 80070bc:	005b      	lslpl	r3, r3, #1
 80070be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80070c2:	2400      	movs	r4, #0
 80070c4:	0fda      	lsrs	r2, r3, #31
 80070c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80070ca:	107f      	asrs	r7, r7, #1
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	2516      	movs	r5, #22
 80070d0:	4620      	mov	r0, r4
 80070d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070d6:	1886      	adds	r6, r0, r2
 80070d8:	428e      	cmp	r6, r1
 80070da:	bfde      	ittt	le
 80070dc:	1b89      	suble	r1, r1, r6
 80070de:	18b0      	addle	r0, r6, r2
 80070e0:	18a4      	addle	r4, r4, r2
 80070e2:	0049      	lsls	r1, r1, #1
 80070e4:	3d01      	subs	r5, #1
 80070e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80070ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80070ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070f2:	d1f0      	bne.n	80070d6 <__ieee754_sqrt+0x92>
 80070f4:	462a      	mov	r2, r5
 80070f6:	f04f 0e20 	mov.w	lr, #32
 80070fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80070fe:	4281      	cmp	r1, r0
 8007100:	eb06 0c05 	add.w	ip, r6, r5
 8007104:	dc02      	bgt.n	800710c <__ieee754_sqrt+0xc8>
 8007106:	d113      	bne.n	8007130 <__ieee754_sqrt+0xec>
 8007108:	459c      	cmp	ip, r3
 800710a:	d811      	bhi.n	8007130 <__ieee754_sqrt+0xec>
 800710c:	f1bc 0f00 	cmp.w	ip, #0
 8007110:	eb0c 0506 	add.w	r5, ip, r6
 8007114:	da43      	bge.n	800719e <__ieee754_sqrt+0x15a>
 8007116:	2d00      	cmp	r5, #0
 8007118:	db41      	blt.n	800719e <__ieee754_sqrt+0x15a>
 800711a:	f100 0801 	add.w	r8, r0, #1
 800711e:	1a09      	subs	r1, r1, r0
 8007120:	459c      	cmp	ip, r3
 8007122:	bf88      	it	hi
 8007124:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007128:	eba3 030c 	sub.w	r3, r3, ip
 800712c:	4432      	add	r2, r6
 800712e:	4640      	mov	r0, r8
 8007130:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007134:	f1be 0e01 	subs.w	lr, lr, #1
 8007138:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800713c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007140:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007144:	d1db      	bne.n	80070fe <__ieee754_sqrt+0xba>
 8007146:	430b      	orrs	r3, r1
 8007148:	d006      	beq.n	8007158 <__ieee754_sqrt+0x114>
 800714a:	1c50      	adds	r0, r2, #1
 800714c:	bf13      	iteet	ne
 800714e:	3201      	addne	r2, #1
 8007150:	3401      	addeq	r4, #1
 8007152:	4672      	moveq	r2, lr
 8007154:	f022 0201 	bicne.w	r2, r2, #1
 8007158:	1063      	asrs	r3, r4, #1
 800715a:	0852      	lsrs	r2, r2, #1
 800715c:	07e1      	lsls	r1, r4, #31
 800715e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007162:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007166:	bf48      	it	mi
 8007168:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800716c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007170:	4614      	mov	r4, r2
 8007172:	e781      	b.n	8007078 <__ieee754_sqrt+0x34>
 8007174:	0ad9      	lsrs	r1, r3, #11
 8007176:	3815      	subs	r0, #21
 8007178:	055b      	lsls	r3, r3, #21
 800717a:	2900      	cmp	r1, #0
 800717c:	d0fa      	beq.n	8007174 <__ieee754_sqrt+0x130>
 800717e:	02cd      	lsls	r5, r1, #11
 8007180:	d50a      	bpl.n	8007198 <__ieee754_sqrt+0x154>
 8007182:	f1c2 0420 	rsb	r4, r2, #32
 8007186:	fa23 f404 	lsr.w	r4, r3, r4
 800718a:	1e55      	subs	r5, r2, #1
 800718c:	4093      	lsls	r3, r2
 800718e:	4321      	orrs	r1, r4
 8007190:	1b42      	subs	r2, r0, r5
 8007192:	e78a      	b.n	80070aa <__ieee754_sqrt+0x66>
 8007194:	4610      	mov	r0, r2
 8007196:	e7f0      	b.n	800717a <__ieee754_sqrt+0x136>
 8007198:	0049      	lsls	r1, r1, #1
 800719a:	3201      	adds	r2, #1
 800719c:	e7ef      	b.n	800717e <__ieee754_sqrt+0x13a>
 800719e:	4680      	mov	r8, r0
 80071a0:	e7bd      	b.n	800711e <__ieee754_sqrt+0xda>
 80071a2:	bf00      	nop
 80071a4:	7ff00000 	.word	0x7ff00000

080071a8 <__ieee754_sqrtf>:
 80071a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80071ac:	4770      	bx	lr

080071ae <with_errno>:
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	4604      	mov	r4, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	4616      	mov	r6, r2
 80071b6:	f7fe fce7 	bl	8005b88 <__errno>
 80071ba:	4629      	mov	r1, r5
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	4620      	mov	r0, r4
 80071c0:	bd70      	pop	{r4, r5, r6, pc}

080071c2 <xflow>:
 80071c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c4:	4614      	mov	r4, r2
 80071c6:	461d      	mov	r5, r3
 80071c8:	b108      	cbz	r0, 80071ce <xflow+0xc>
 80071ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	e9cd 2300 	strd	r2, r3, [sp]
 80071d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 fa75 	bl	80006c8 <__aeabi_dmul>
 80071de:	2222      	movs	r2, #34	; 0x22
 80071e0:	b003      	add	sp, #12
 80071e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071e6:	f7ff bfe2 	b.w	80071ae <with_errno>

080071ea <__math_uflow>:
 80071ea:	b508      	push	{r3, lr}
 80071ec:	2200      	movs	r2, #0
 80071ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071f2:	f7ff ffe6 	bl	80071c2 <xflow>
 80071f6:	ec41 0b10 	vmov	d0, r0, r1
 80071fa:	bd08      	pop	{r3, pc}

080071fc <__math_oflow>:
 80071fc:	b508      	push	{r3, lr}
 80071fe:	2200      	movs	r2, #0
 8007200:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007204:	f7ff ffdd 	bl	80071c2 <xflow>
 8007208:	ec41 0b10 	vmov	d0, r0, r1
 800720c:	bd08      	pop	{r3, pc}

0800720e <fabs>:
 800720e:	ec51 0b10 	vmov	r0, r1, d0
 8007212:	ee10 2a10 	vmov	r2, s0
 8007216:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800721a:	ec43 2b10 	vmov	d0, r2, r3
 800721e:	4770      	bx	lr

08007220 <finite>:
 8007220:	b082      	sub	sp, #8
 8007222:	ed8d 0b00 	vstr	d0, [sp]
 8007226:	9801      	ldr	r0, [sp, #4]
 8007228:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800722c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007230:	0fc0      	lsrs	r0, r0, #31
 8007232:	b002      	add	sp, #8
 8007234:	4770      	bx	lr
	...

08007238 <scalbn>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	ec55 4b10 	vmov	r4, r5, d0
 800723e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007242:	4606      	mov	r6, r0
 8007244:	462b      	mov	r3, r5
 8007246:	b99a      	cbnz	r2, 8007270 <scalbn+0x38>
 8007248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800724c:	4323      	orrs	r3, r4
 800724e:	d036      	beq.n	80072be <scalbn+0x86>
 8007250:	4b39      	ldr	r3, [pc, #228]	; (8007338 <scalbn+0x100>)
 8007252:	4629      	mov	r1, r5
 8007254:	ee10 0a10 	vmov	r0, s0
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 fa35 	bl	80006c8 <__aeabi_dmul>
 800725e:	4b37      	ldr	r3, [pc, #220]	; (800733c <scalbn+0x104>)
 8007260:	429e      	cmp	r6, r3
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	da10      	bge.n	800728a <scalbn+0x52>
 8007268:	a32b      	add	r3, pc, #172	; (adr r3, 8007318 <scalbn+0xe0>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	e03a      	b.n	80072e6 <scalbn+0xae>
 8007270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007274:	428a      	cmp	r2, r1
 8007276:	d10c      	bne.n	8007292 <scalbn+0x5a>
 8007278:	ee10 2a10 	vmov	r2, s0
 800727c:	4620      	mov	r0, r4
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 f86c 	bl	800035c <__adddf3>
 8007284:	4604      	mov	r4, r0
 8007286:	460d      	mov	r5, r1
 8007288:	e019      	b.n	80072be <scalbn+0x86>
 800728a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800728e:	460b      	mov	r3, r1
 8007290:	3a36      	subs	r2, #54	; 0x36
 8007292:	4432      	add	r2, r6
 8007294:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007298:	428a      	cmp	r2, r1
 800729a:	dd08      	ble.n	80072ae <scalbn+0x76>
 800729c:	2d00      	cmp	r5, #0
 800729e:	a120      	add	r1, pc, #128	; (adr r1, 8007320 <scalbn+0xe8>)
 80072a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a4:	da1c      	bge.n	80072e0 <scalbn+0xa8>
 80072a6:	a120      	add	r1, pc, #128	; (adr r1, 8007328 <scalbn+0xf0>)
 80072a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ac:	e018      	b.n	80072e0 <scalbn+0xa8>
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	dd08      	ble.n	80072c4 <scalbn+0x8c>
 80072b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072be:	ec45 4b10 	vmov	d0, r4, r5
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80072c8:	da19      	bge.n	80072fe <scalbn+0xc6>
 80072ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80072ce:	429e      	cmp	r6, r3
 80072d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80072d4:	dd0a      	ble.n	80072ec <scalbn+0xb4>
 80072d6:	a112      	add	r1, pc, #72	; (adr r1, 8007320 <scalbn+0xe8>)
 80072d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e2      	bne.n	80072a6 <scalbn+0x6e>
 80072e0:	a30f      	add	r3, pc, #60	; (adr r3, 8007320 <scalbn+0xe8>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f9ef 	bl	80006c8 <__aeabi_dmul>
 80072ea:	e7cb      	b.n	8007284 <scalbn+0x4c>
 80072ec:	a10a      	add	r1, pc, #40	; (adr r1, 8007318 <scalbn+0xe0>)
 80072ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0b8      	beq.n	8007268 <scalbn+0x30>
 80072f6:	a10e      	add	r1, pc, #56	; (adr r1, 8007330 <scalbn+0xf8>)
 80072f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072fc:	e7b4      	b.n	8007268 <scalbn+0x30>
 80072fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007302:	3236      	adds	r2, #54	; 0x36
 8007304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800730c:	4620      	mov	r0, r4
 800730e:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <scalbn+0x108>)
 8007310:	2200      	movs	r2, #0
 8007312:	e7e8      	b.n	80072e6 <scalbn+0xae>
 8007314:	f3af 8000 	nop.w
 8007318:	c2f8f359 	.word	0xc2f8f359
 800731c:	01a56e1f 	.word	0x01a56e1f
 8007320:	8800759c 	.word	0x8800759c
 8007324:	7e37e43c 	.word	0x7e37e43c
 8007328:	8800759c 	.word	0x8800759c
 800732c:	fe37e43c 	.word	0xfe37e43c
 8007330:	c2f8f359 	.word	0xc2f8f359
 8007334:	81a56e1f 	.word	0x81a56e1f
 8007338:	43500000 	.word	0x43500000
 800733c:	ffff3cb0 	.word	0xffff3cb0
 8007340:	3c900000 	.word	0x3c900000

08007344 <_init>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	bf00      	nop
 8007348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734a:	bc08      	pop	{r3}
 800734c:	469e      	mov	lr, r3
 800734e:	4770      	bx	lr

08007350 <_fini>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr
